{"ast":null,"code":"import _classCallCheck from \"C:\\\\Project\\\\Front_end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Project\\\\Front_end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Project\\\\Front_end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Project\\\\Front_end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Project\\\\Front_end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport { Transport } from \"../transport.js\";\nimport { nextTick } from \"./websocket-constructor.js\";\nimport { createPacketDecoderStream, createPacketEncoderStream } from \"engine.io-parser\";\nexport var WT = /*#__PURE__*/function (_Transport) {\n  _inherits(WT, _Transport);\n  function WT() {\n    _classCallCheck(this, WT);\n    return _possibleConstructorReturn(this, _getPrototypeOf(WT).apply(this, arguments));\n  }\n  _createClass(WT, [{\n    key: \"doOpen\",\n    value: function doOpen() {\n      var _this = this;\n      // @ts-ignore\n      if (typeof WebTransport !== \"function\") {\n        return;\n      }\n      // @ts-ignore\n      this.transport = new WebTransport(this.createUri(\"https\"), this.opts.transportOptions[this.name]);\n      this.transport.closed.then(function () {\n        _this.onClose();\n      }).catch(function (err) {\n        _this.onError(\"webtransport error\", err);\n      });\n      // note: we could have used async/await, but that would require some additional polyfills\n      this.transport.ready.then(function () {\n        _this.transport.createBidirectionalStream().then(function (stream) {\n          var decoderStream = createPacketDecoderStream(Number.MAX_SAFE_INTEGER, _this.socket.binaryType);\n          var reader = stream.readable.pipeThrough(decoderStream).getReader();\n          var encoderStream = createPacketEncoderStream();\n          encoderStream.readable.pipeTo(stream.writable);\n          _this.writer = encoderStream.writable.getWriter();\n          var read = function read() {\n            reader.read().then(function (_ref) {\n              var done = _ref.done,\n                value = _ref.value;\n              if (done) {\n                return;\n              }\n              _this.onPacket(value);\n              read();\n            }).catch(function (err) {});\n          };\n          read();\n          var packet = {\n            type: \"open\"\n          };\n          if (_this.query.sid) {\n            packet.data = \"{\\\"sid\\\":\\\"\".concat(_this.query.sid, \"\\\"}\");\n          }\n          _this.writer.write(packet).then(function () {\n            return _this.onOpen();\n          });\n        });\n      });\n    }\n  }, {\n    key: \"write\",\n    value: function write(packets) {\n      var _this2 = this;\n      this.writable = false;\n      var _loop = function _loop() {\n        var packet = packets[i];\n        var lastPacket = i === packets.length - 1;\n        _this2.writer.write(packet).then(function () {\n          if (lastPacket) {\n            nextTick(function () {\n              _this2.writable = true;\n              _this2.emitReserved(\"drain\");\n            }, _this2.setTimeoutFn);\n          }\n        });\n      };\n      for (var i = 0; i < packets.length; i++) {\n        _loop();\n      }\n    }\n  }, {\n    key: \"doClose\",\n    value: function doClose() {\n      var _a;\n      (_a = this.transport) === null || _a === void 0 ? void 0 : _a.close();\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return \"webtransport\";\n    }\n  }]);\n  return WT;\n}(Transport);","map":null,"metadata":{},"sourceType":"module"}