{"ast":null,"code":"\"use strict\";\n\n// V8 doesn't support optimization for compound assignment of let variables.\n// These methods get called a lot so disable the rule to allow V8 opmtimization.\n/* eslint-disable operator-assignment */\nvar _ = require(\"lodash\");\nvar ADDRESS_REGEX = /^(?:'?(.+?)'?!)?(?:(\\$)?([A-Z]+)(\\$)?(\\d+)(?::(\\$)?([A-Z]+)(\\$)?(\\d+))?|(\\$)?([A-Z]+):(\\$)?([A-Z]+)|(\\$)?(\\d+):(\\$)?(\\d+))$/;\n\n/**\n * Address converter.\n * @private\n */\nmodule.exports = {\n  /**\n   * Convert a column name to a number.\n   * @param {string} name - The column name.\n   * @returns {number} The number.\n   */\n  columnNameToNumber: function columnNameToNumber(name) {\n    if (!name || typeof name !== \"string\") return;\n    name = name.toUpperCase();\n    var sum = 0;\n    for (var i = 0; i < name.length; i++) {\n      sum = sum * 26;\n      sum = sum + (name[i].charCodeAt(0) - 'A'.charCodeAt(0) + 1);\n    }\n    return sum;\n  },\n  /**\n   * Convert a column number to a name.\n   * @param {number} number - The column number.\n   * @returns {string} The name.\n   */\n  columnNumberToName: function columnNumberToName(number) {\n    var dividend = number;\n    var name = '';\n    var modulo = 0;\n    while (dividend > 0) {\n      modulo = (dividend - 1) % 26;\n      name = String.fromCharCode('A'.charCodeAt(0) + modulo) + name;\n      dividend = Math.floor((dividend - modulo) / 26);\n    }\n    return name;\n  },\n  /**\n   * Convert an address to a reference object.\n   * @param {string} address - The address.\n   * @returns {{}} The reference object.\n   */\n  fromAddress: function fromAddress(address) {\n    var match = address.match(ADDRESS_REGEX);\n    if (!match) return;\n    var ref = {};\n    if (match[1]) ref.sheetName = match[1].replace(/''/g, \"'\");\n    if (match[3] && match[7]) {\n      ref.type = 'range';\n      ref.startColumnAnchored = !!match[2];\n      ref.startColumnName = match[3];\n      ref.startColumnNumber = this.columnNameToNumber(ref.startColumnName);\n      ref.startRowAnchored = !!match[4];\n      ref.startRowNumber = parseInt(match[5]);\n      ref.endColumnAnchored = !!match[6];\n      ref.endColumnName = match[7];\n      ref.endColumnNumber = this.columnNameToNumber(ref.endColumnName);\n      ref.endRowAnchored = !!match[8];\n      ref.endRowNumber = parseInt(match[9]);\n    } else if (match[3]) {\n      ref.type = 'cell';\n      ref.columnAnchored = !!match[2];\n      ref.columnName = match[3];\n      ref.columnNumber = this.columnNameToNumber(ref.columnName);\n      ref.rowAnchored = !!match[4];\n      ref.rowNumber = parseInt(match[5]);\n    } else if (match[11] && match[11] !== match[13]) {\n      ref.type = 'columnRange';\n      ref.startColumnAnchored = !!match[10];\n      ref.startColumnName = match[11];\n      ref.startColumnNumber = this.columnNameToNumber(ref.startColumnName);\n      ref.endColumnAnchored = !!match[12];\n      ref.endColumnName = match[13];\n      ref.endColumnNumber = this.columnNameToNumber(ref.endColumnName);\n    } else if (match[11]) {\n      ref.type = 'column';\n      ref.columnAnchored = !!match[10];\n      ref.columnName = match[11];\n      ref.columnNumber = this.columnNameToNumber(ref.columnName);\n    } else if (match[15] && match[15] !== match[17]) {\n      ref.type = 'rowRange';\n      ref.startRowAnchored = !!match[14];\n      ref.startRowNumber = parseInt(match[15]);\n      ref.endRowAnchored = !!match[16];\n      ref.endRowNumber = parseInt(match[17]);\n    } else if (match[15]) {\n      ref.type = 'row';\n      ref.rowAnchored = !!match[14];\n      ref.rowNumber = parseInt(match[15]);\n    }\n    return ref;\n  },\n  /**\n   * Convert a reference object to an address.\n   * @param {{}} ref - The reference object.\n   * @returns {string} The address.\n   */\n  toAddress: function toAddress(ref) {\n    var a, b;\n    var sheetName = ref.sheetName;\n    if (ref.type === 'cell') {\n      a = {\n        columnName: ref.columnName,\n        columnNumber: ref.columnNumber,\n        columnAnchored: ref.columnAnchored,\n        rowNumber: ref.rowNumber,\n        rowAnchored: ref.rowAnchored\n      };\n    } else if (ref.type === 'range') {\n      a = {\n        columnName: ref.startColumnName,\n        columnNumber: ref.startColumnNumber,\n        columnAnchored: ref.startColumnAnchored,\n        rowNumber: ref.startRowNumber,\n        rowAnchored: ref.startRowAnchored\n      };\n      b = {\n        columnName: ref.endColumnName,\n        columnNumber: ref.endColumnNumber,\n        columnAnchored: ref.endColumnAnchored,\n        rowNumber: ref.endRowNumber,\n        rowAnchored: ref.endRowAnchored\n      };\n    } else if (ref.type === 'column') {\n      a = b = {\n        columnName: ref.columnName,\n        columnNumber: ref.columnNumber,\n        columnAnchored: ref.columnAnchored\n      };\n    } else if (ref.type === 'row') {\n      a = b = {\n        rowNumber: ref.rowNumber,\n        rowAnchored: ref.rowAnchored\n      };\n    } else if (ref.type === 'columnRange') {\n      a = {\n        columnName: ref.startColumnName,\n        columnNumber: ref.startColumnNumber,\n        columnAnchored: ref.startColumnAnchored\n      };\n      b = {\n        columnName: ref.endColumnName,\n        columnNumber: ref.endColumnNumber,\n        columnAnchored: ref.endColumnAnchored\n      };\n    } else if (ref.type === 'rowRange') {\n      a = {\n        rowNumber: ref.startRowNumber,\n        rowAnchored: ref.startRowAnchored\n      };\n      b = {\n        rowNumber: ref.endRowNumber,\n        rowAnchored: ref.endRowAnchored\n      };\n    }\n    var address = '';\n    if (sheetName) address = \"\".concat(address, \"'\").concat(sheetName.replace(/'/g, \"''\"), \"'!\");\n    if (a.columnAnchored) address = \"\".concat(address, \"$\");\n    if (a.columnName) address = address + a.columnName;else if (a.columnNumber) address = address + this.columnNumberToName(a.columnNumber);\n    if (a.rowAnchored) address = \"\".concat(address, \"$\");\n    if (a.rowNumber) address = address + a.rowNumber;\n    if (b) {\n      address = \"\".concat(address, \":\");\n      if (b.columnAnchored) address = \"\".concat(address, \"$\");\n      if (b.columnName) address = address + b.columnName;else if (b.columnNumber) address = address + this.columnNumberToName(b.columnNumber);\n      if (b.rowAnchored) address = \"\".concat(address, \"$\");\n      if (b.rowNumber) address = address + b.rowNumber;\n    }\n    return address;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}