{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nexport function find(children, func, context) {\n  var index = 0;\n  var result;\n  React.Children.forEach(children, function (child) {\n    if (result) {\n      return;\n    }\n    index += 1;\n    if (func.call(context, child, index)) {\n      result = child;\n    }\n  });\n  return result;\n}\nexport function map(children, func, context) {\n  var index = 0;\n  return React.Children.map(children, function (child) {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return child;\n    }\n    var handle = func.call(context, child, index);\n    index += 1;\n    return handle;\n  });\n}\nexport function mapCloneElement(children, func, context) {\n  return map(children, function (child, index) {\n    return /*#__PURE__*/React.cloneElement(child, _extends({\n      key: index\n    }, func(child, index)));\n  }, context);\n}\nexport function count(children) {\n  return React.Children.count(Array.isArray(children) ? children.filter(function (child) {\n    return child;\n  }) : children);\n}\nfunction some(children, func, context) {\n  var index = 0;\n  var result = false;\n  React.Children.forEach(children, function (child) {\n    if (result) {\n      return;\n    }\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return;\n    }\n    /* eslint-disable */\n\n    if (func.call(context, child, index += 1)) {\n      result = true;\n    }\n  });\n  return result;\n}\nexport default {\n  mapCloneElement: mapCloneElement,\n  count: count,\n  some: some,\n  map: map,\n  find: find\n};","map":null,"metadata":{},"sourceType":"module"}