{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Project\\\\Front_end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Project\\\\Front_end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _ = require(\"lodash\");\nvar RichTextFragment = require(\"./RichTextFragment\");\n\n/**\n * A RichText class that contains many {@link RichTextFragment}.\n */\nvar RichText = /*#__PURE__*/function () {\n  /**\n   * Creates a new instance of RichText. If you get the instance by calling `Cell.value()`,\n   * adding a text contains line separator will trigger {@link Cell.style}('wrapText', true), which\n   * will make MS Excel show the new line. i.e. In MS Excel, Tap \"alt+Enter\" in a cell, the cell\n   * will set wrap text to true automatically.\n   *\n   * @param {undefined|null|Object} [node] - The node stored in the shared string\n   */\n  function RichText(node) {\n    _classCallCheck(this, RichText);\n    this._node = [];\n    this._cell = null;\n    this._remainingNodes = [];\n    if (node) {\n      for (var i = 0; i < node.length; i++) {\n        var fragment = node[i];\n        if (fragment.name === 'r') {\n          this._node.push(new RichTextFragment(fragment, null, this));\n        } else {\n          // special node, e.g. rPh, phoneticPr in Japanese language.\n          this._remainingNodes.push(fragment);\n        }\n      }\n    }\n  }\n\n  /**\n   * Gets which cell this {@link RichText} instance belongs to.\n   * @return {Cell|undefined} The cell this instance belongs to.\n   */\n  _createClass(RichText, [{\n    key: \"text\",\n    /**\n     * Gets concatenated text without styles.\n     * @return {string} concatenated text\n     */\n    value: function text() {\n      var text = '';\n      for (var i = 0; i < this._node.length; i++) {\n        text += this.get(i).value();\n      }\n      return text;\n    }\n    /**\n     * Gets the instance with cell reference defined.\n     * @param {Cell} cell - Cell reference.\n     * @return {RichText} The instance with cell reference defined.\n     */\n  }, {\n    key: \"getInstanceWithCellRef\",\n    value: function getInstanceWithCellRef(cell) {\n      this._cell = cell;\n      return this;\n    }\n    /**\n     * Returns a deep copy of this instance.\n     * If cell reference is provided, it checks line separators and calls\n     * `cell.style('wrapText', true)` when needed.\n     * @param {Cell|undefined} [cell] - The cell reference.\n     * @return {RichText} A deep copied instance\n     */\n  }, {\n    key: \"copy\",\n    value: function copy(cell) {\n      var newRichText = new RichText(_.cloneDeep(this.toXml()));\n      if (cell && _.includes(this.text(), '\\n')) {\n        cell.style('wrapText', true);\n      }\n      return newRichText;\n    }\n    /**\n     * Gets the ith fragment of this {@link RichText} instance.\n     * @param {number} index - The index\n     * @return {RichTextFragment} A rich text fragment\n     */\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      return this._node[index];\n    }\n    /**\n     * Removes a rich text fragment. This instance will be mutated.\n     * @param {number} index - the index of the fragment to remove\n     * @return {RichText} the rich text instance\n     */\n  }, {\n    key: \"remove\",\n    value: function remove(index) {\n      this._node.splice(index, 1);\n      this.removeUnsupportedNodes();\n      return this;\n    }\n    /**\n     * Adds a rich text fragment to the last or after the given index. This instance will be mutated.\n     * @param {string} text - the text\n     * @param {{}} [styles] - the styles js object, i.e. {fontSize: 12}\n     * @param {number|undefined|null} [index] - the index of the fragment to add\n     * @return {RichText} the rich text instance\n     */\n  }, {\n    key: \"add\",\n    value: function add(text, styles, index) {\n      if (index === undefined || index === null) {\n        this._node.push(new RichTextFragment(text, styles, this));\n      } else {\n        this._node.splice(index, 0, new RichTextFragment(text, styles, this));\n      }\n      this.removeUnsupportedNodes();\n      return this;\n    }\n    /**\n     * Clears this rich text\n     * @return {RichText} the rich text instance\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._node = [];\n      this._remainingNodes = [];\n      this._cell = undefined;\n      return this;\n    }\n    /**\n     * Remove all unsupported nodes (phoneticPr, rPh for Japanese language).\n     * @return {undefined}\n     */\n  }, {\n    key: \"removeUnsupportedNodes\",\n    value: function removeUnsupportedNodes() {\n      this._remainingNodes = [];\n    }\n    /**\n     * Convert the rich text to an XML object.\n     * @returns {Array.<{}>} The XML form.\n     * @ignore\n     */\n  }, {\n    key: \"toXml\",\n    value: function toXml() {\n      var node = [];\n      for (var i = 0; i < this._node.length; i++) {\n        node.push(this._node[i].toXml());\n      }\n      return node.concat(this._remainingNodes);\n    }\n  }, {\n    key: \"cell\",\n    get: function get() {\n      return this._cell;\n    }\n    /**\n     * Gets the how many rich text fragment this {@link RichText} instance contains\n     * @return {number} The number of fragments this {@link RichText} instance has.\n     */\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._node.length;\n    }\n  }]);\n  return RichText;\n}(); // IE doesn't support function names so explicitly set it.\nif (!RichText.name) RichText.name = \"RichText\";\nmodule.exports = RichText;","map":null,"metadata":{},"sourceType":"script"}