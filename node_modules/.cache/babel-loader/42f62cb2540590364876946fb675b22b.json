{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Project\\\\Front_end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Project\\\\Front_end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar ArgHandler = require(\"./ArgHandler\");\nvar addressConverter = require(\"./addressConverter\");\n\n/**\n * A range of cells.\n */\nvar Range = /*#__PURE__*/function () {\n  // /**\n  //  * Creates a new instance of Range.\n  //  * @param {Cell} startCell - The start cell.\n  //  * @param {Cell} endCell - The end cell.\n  //  */\n  function Range(startCell, endCell) {\n    _classCallCheck(this, Range);\n    this._startCell = startCell;\n    this._endCell = endCell;\n    this._findRangeExtent(startCell, endCell);\n  }\n\n  /**\n   * Get the address of the range.\n   * @param {{}} [opts] - Options\n   * @param {boolean} [opts.includeSheetName] - Include the sheet name in the address.\n   * @param {boolean} [opts.startRowAnchored] - Anchor the start row.\n   * @param {boolean} [opts.startColumnAnchored] - Anchor the start column.\n   * @param {boolean} [opts.endRowAnchored] - Anchor the end row.\n   * @param {boolean} [opts.endColumnAnchored] - Anchor the end column.\n   * @param {boolean} [opts.anchored] - Anchor all row and columns.\n   * @returns {string} The address.\n   */\n  _createClass(Range, [{\n    key: \"address\",\n    value: function address(opts) {\n      return addressConverter.toAddress({\n        type: 'range',\n        startRowNumber: this.startCell().rowNumber(),\n        startRowAnchored: opts && (opts.startRowAnchored || opts.anchored),\n        startColumnName: this.startCell().columnName(),\n        startColumnAnchored: opts && (opts.startColumnAnchored || opts.anchored),\n        endRowNumber: this.endCell().rowNumber(),\n        endRowAnchored: opts && (opts.endRowAnchored || opts.anchored),\n        endColumnName: this.endCell().columnName(),\n        endColumnAnchored: opts && (opts.endColumnAnchored || opts.anchored),\n        sheetName: opts && opts.includeSheetName && this.sheet().name()\n      });\n    }\n    /**\n     * Gets a cell within the range.\n     * @param {number} ri - Row index relative to the top-left corner of the range (0-based).\n     * @param {number} ci - Column index relative to the top-left corner of the range (0-based).\n     * @returns {Cell} The cell.\n     */\n  }, {\n    key: \"cell\",\n    value: function cell(ri, ci) {\n      return this.sheet().cell(this._minRowNumber + ri, this._minColumnNumber + ci);\n    }\n    /**\n     * Sets sheet autoFilter to this range.\n     * @returns {Range} This range.\n     */\n  }, {\n    key: \"autoFilter\",\n    value: function autoFilter() {\n      this.sheet().autoFilter(this);\n      return this;\n    }\n    /**\n     * Get the cells in the range as a 2D array.\n     * @returns {Array.<Array.<Cell>>} The cells.\n     */\n  }, {\n    key: \"cells\",\n    value: function cells() {\n      return this.map(function (cell) {\n        return cell;\n      });\n    }\n    /**\n     * Clear the contents of all the cells in the range.\n     * @returns {Range} The range.\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      return this.value(undefined);\n    }\n    /**\n     * Get the end cell of the range.\n     * @returns {Cell} The end cell.\n     */\n  }, {\n    key: \"endCell\",\n    value: function endCell() {\n      return this._endCell;\n    }\n    /**\n     * Callback used by forEach.\n     * @callback Range~forEachCallback\n     * @param {Cell} cell - The cell.\n     * @param {number} ri - The relative row index.\n     * @param {number} ci - The relative column index.\n     * @param {Range} range - The range.\n     * @returns {undefined}\n     */\n    /**\n     * Call a function for each cell in the range. Goes by row then column.\n     * @param {Range~forEachCallback} callback - Function called for each cell in the range.\n     * @returns {Range} The range.\n     */\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback) {\n      for (var ri = 0; ri < this._numRows; ri++) {\n        for (var ci = 0; ci < this._numColumns; ci++) {\n          callback(this.cell(ri, ci), ri, ci, this);\n        }\n      }\n      return this;\n    }\n    /**\n     * Gets the shared formula in the start cell (assuming it's the source of the shared formula).\n     * @returns {string|undefined} The shared formula.\n     */\n    /**\n    * Sets the shared formula in the range. The formula will be translated for each cell.\n    * @param {string} formula - The formula to set.\n    * @returns {Range} The range.\n    */\n  }, {\n    key: \"formula\",\n    value: function formula() {\n      var _this = this;\n      return new ArgHandler(\"Range.formula\").case(function () {\n        return _this.startCell().getSharedRefFormula();\n      }).case('string', function (formula) {\n        var sharedFormulaId = _this.sheet().incrementMaxSharedFormulaId();\n        _this.forEach(function (cell, ri, ci) {\n          if (ri === 0 && ci === 0) {\n            cell.setSharedFormula(sharedFormulaId, formula, _this.address());\n          } else {\n            cell.setSharedFormula(sharedFormulaId);\n          }\n        });\n        return _this;\n      }).handle(arguments);\n    }\n    /**\n     * Callback used by map.\n     * @callback Range~mapCallback\n     * @param {Cell} cell - The cell.\n     * @param {number} ri - The relative row index.\n     * @param {number} ci - The relative column index.\n     * @param {Range} range - The range.\n     * @returns {*} The value to map to.\n     */\n    /**\n     * Creates a 2D array of values by running each cell through a callback.\n     * @param {Range~mapCallback} callback - Function called for each cell in the range.\n     * @returns {Array.<Array.<*>>} The 2D array of return values.\n     */\n  }, {\n    key: \"map\",\n    value: function map(callback) {\n      var _this2 = this;\n      var result = [];\n      this.forEach(function (cell, ri, ci) {\n        if (!result[ri]) result[ri] = [];\n        result[ri][ci] = callback(cell, ri, ci, _this2);\n      });\n      return result;\n    }\n    /**\n     * Gets a value indicating whether the cells in the range are merged.\n     * @returns {boolean} The value.\n     */\n    /**\n    * Sets a value indicating whether the cells in the range should be merged.\n    * @param {boolean} merged - True to merge, false to unmerge.\n    * @returns {Range} The range.\n    */\n  }, {\n    key: \"merged\",\n    value: function merged(_merged) {\n      var _this3 = this;\n      return new ArgHandler('Range.merged').case(function () {\n        return _this3.sheet().merged(_this3.address());\n      }).case('*', function (merged) {\n        _this3.sheet().merged(_this3.address(), merged);\n        return _this3;\n      }).handle(arguments);\n    }\n    /**\n     * Gets the data validation object attached to the Range.\n     * @returns {object|undefined} The data validation object or undefined if not set.\n     */\n    /**\n    * Set or clear the data validation object of the entire range.\n    * @param {object|undefined} dataValidation - Object or null to clear.\n    * @returns {Range} The range.\n    */\n  }, {\n    key: \"dataValidation\",\n    value: function dataValidation() {\n      var _this4 = this;\n      return new ArgHandler('Range.dataValidation').case(function () {\n        return _this4.sheet().dataValidation(_this4.address());\n      }).case('boolean', function (obj) {\n        return _this4.sheet().dataValidation(_this4.address(), obj);\n      }).case('*', function (obj) {\n        _this4.sheet().dataValidation(_this4.address(), obj);\n        return _this4;\n      }).handle(arguments);\n    }\n    /**\n     * Callback used by reduce.\n     * @callback Range~reduceCallback\n     * @param {*} accumulator - The accumulated value.\n     * @param {Cell} cell - The cell.\n     * @param {number} ri - The relative row index.\n     * @param {number} ci - The relative column index.\n     * @param {Range} range - The range.\n     * @returns {*} The value to map to.\n     */\n    /**\n     * Reduces the range to a single value accumulated from the result of a function called for each cell.\n     * @param {Range~reduceCallback} callback - Function called for each cell in the range.\n     * @param {*} [initialValue] - The initial value.\n     * @returns {*} The accumulated value.\n     */\n  }, {\n    key: \"reduce\",\n    value: function reduce(callback, initialValue) {\n      var _this5 = this;\n      var accumulator = initialValue;\n      this.forEach(function (cell, ri, ci) {\n        accumulator = callback(accumulator, cell, ri, ci, _this5);\n      });\n      return accumulator;\n    }\n    /**\n     * Gets the parent sheet of the range.\n     * @returns {Sheet} The parent sheet.\n     */\n  }, {\n    key: \"sheet\",\n    value: function sheet() {\n      return this.startCell().sheet();\n    }\n    /**\n     * Gets the start cell of the range.\n     * @returns {Cell} The start cell.\n     */\n  }, {\n    key: \"startCell\",\n    value: function startCell() {\n      return this._startCell;\n    }\n    /**\n     * Gets a single style for each cell.\n     * @param {string} name - The name of the style.\n     * @returns {Array.<Array.<*>>} 2D array of style values.\n     */\n    /**\n    * Gets multiple styles for each cell.\n    * @param {Array.<string>} names - The names of the styles.\n    * @returns {Object.<string, Array.<Array.<*>>>} Object whose keys are style names and values are 2D arrays of style values.\n    */\n    /**\n    * Set the style in each cell to the result of a function called for each.\n    * @param {string} name - The name of the style.\n    * @param {Range~mapCallback} callback - The callback to provide value for the cell.\n    * @returns {Range} The range.\n    */\n    /**\n    * Sets the style in each cell to the corresponding value in the given 2D array of values.\n    * @param {string} name - The name of the style.\n    * @param {Array.<Array.<*>>} values - The style values to set.\n    * @returns {Range} The range.\n    */\n    /**\n    * Set the style of all cells in the range to a single style value.\n    * @param {string} name - The name of the style.\n    * @param {*} value - The value to set.\n    * @returns {Range} The range.\n    */\n    /**\n    * Set multiple styles for the cells in the range.\n    * @param {object.<string,Range~mapCallback|Array.<Array.<*>>|*>} styles - Object whose keys are style names and values are either function callbacks, 2D arrays of style values, or a single value for all the cells.\n    * @returns {Range} The range.\n    */\n    /**\n    * Sets to a specific style\n    * @param {Style} style - Style object given from stylesheet.createStyle\n    * @returns {Range} The range.\n    */\n  }, {\n    key: \"style\",\n    value: function style() {\n      var _this6 = this;\n      return new ArgHandler(\"Range.style\").case('string', function (name) {\n        // Get single value\n        return _this6.map(function (cell) {\n          return cell.style(name);\n        });\n      }).case('array', function (names) {\n        // Get list of values\n        var values = {};\n        names.forEach(function (name) {\n          values[name] = _this6.style(name);\n        });\n        return values;\n      }).case(['string', 'function'], function (name, callback) {\n        // Set a single value for the cells to the result of a function\n        return _this6.forEach(function (cell, ri, ci) {\n          cell.style(name, callback(cell, ri, ci, _this6));\n        });\n      }).case(['string', 'array'], function (name, values) {\n        // Set a single value for the cells using an array of matching dimension\n        return _this6.forEach(function (cell, ri, ci) {\n          if (values[ri] && values[ri][ci] !== undefined) {\n            cell.style(name, values[ri][ci]);\n          }\n        });\n      }).case(['string', '*'], function (name, value) {\n        // Set a single value for all cells to a single value\n        return _this6.forEach(function (cell) {\n          return cell.style(name, value);\n        });\n      }).case('object', function (nameValues) {\n        // Object of key value pairs to set\n        for (var name in nameValues) {\n          if (!nameValues.hasOwnProperty(name)) continue;\n          var value = nameValues[name];\n          _this6.style(name, value);\n        }\n        return _this6;\n      }).case('Style', function (style) {\n        _this6._style = style;\n        return _this6.forEach(function (cell) {\n          return cell.style(style);\n        });\n      }).handle(arguments);\n    }\n    /**\n     * Callback used by tap.\n     * @callback Range~tapCallback\n     * @param {Range} range - The range.\n     * @returns {undefined}\n     */\n    /**\n     * Invoke a callback on the range and return the range. Useful for method chaining.\n     * @param {Range~tapCallback} callback - The callback function.\n     * @returns {Range} The range.\n     */\n  }, {\n    key: \"tap\",\n    value: function tap(callback) {\n      callback(this);\n      return this;\n    }\n    /**\n     * Callback used by thru.\n     * @callback Range~thruCallback\n     * @param {Range} range - The range.\n     * @returns {*} The value to return from thru.\n     */\n    /**\n     * Invoke a callback on the range and return the value provided by the callback. Useful for method chaining.\n     * @param {Range~thruCallback} callback - The callback function.\n     * @returns {*} The return value of the callback.\n     */\n  }, {\n    key: \"thru\",\n    value: function thru(callback) {\n      return callback(this);\n    }\n    /**\n     * Get the values of each cell in the range as a 2D array.\n     * @returns {Array.<Array.<*>>} The values.\n     */\n    /**\n    * Set the values in each cell to the result of a function called for each.\n    * @param {Range~mapCallback} callback - The callback to provide value for the cell.\n    * @returns {Range} The range.\n    */\n    /**\n    * Sets the value in each cell to the corresponding value in the given 2D array of values.\n    * @param {Array.<Array.<*>>} values - The values to set.\n    * @returns {Range} The range.\n    */\n    /**\n    * Set the value of all cells in the range to a single value.\n    * @param {*} value - The value to set.\n    * @returns {Range} The range.\n    */\n  }, {\n    key: \"value\",\n    value: function value() {\n      var _this7 = this;\n      return new ArgHandler(\"Range.value\").case(function () {\n        // Get values\n        return _this7.map(function (cell) {\n          return cell.value();\n        });\n      }).case('function', function (callback) {\n        // Set a value for the cells to the result of a function\n        return _this7.forEach(function (cell, ri, ci) {\n          cell.value(callback(cell, ri, ci, _this7));\n        });\n      }).case('array', function (values) {\n        // Set value for the cells using an array of matching dimension\n        return _this7.forEach(function (cell, ri, ci) {\n          if (values[ri] && values[ri][ci] !== undefined) {\n            cell.value(values[ri][ci]);\n          }\n        });\n      }).case('*', function (value) {\n        // Set the value for all cells to a single value\n        return _this7.forEach(function (cell) {\n          return cell.value(value);\n        });\n      }).handle(arguments);\n    }\n    /**\n     * Gets the parent workbook.\n     * @returns {Workbook} The parent workbook.\n     */\n  }, {\n    key: \"workbook\",\n    value: function workbook() {\n      return this.sheet().workbook();\n    }\n    /**\n     * Find the extent of the range.\n     * @returns {undefined}\n     * @private\n     */\n  }, {\n    key: \"_findRangeExtent\",\n    value: function _findRangeExtent() {\n      this._minRowNumber = Math.min(this._startCell.rowNumber(), this._endCell.rowNumber());\n      this._maxRowNumber = Math.max(this._startCell.rowNumber(), this._endCell.rowNumber());\n      this._minColumnNumber = Math.min(this._startCell.columnNumber(), this._endCell.columnNumber());\n      this._maxColumnNumber = Math.max(this._startCell.columnNumber(), this._endCell.columnNumber());\n      this._numRows = this._maxRowNumber - this._minRowNumber + 1;\n      this._numColumns = this._maxColumnNumber - this._minColumnNumber + 1;\n    }\n  }]);\n  return Range;\n}();\nmodule.exports = Range;","map":null,"metadata":{},"sourceType":"script"}