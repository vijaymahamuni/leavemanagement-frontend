{"ast":null,"code":"import { useEffect } from 'react';\nimport useCommittedRef from './useCommittedRef';\nfunction useRafInterval(fn, ms) {\n  var paused = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var handle;\n  var start = new Date().getTime();\n  var fnRef = useCommittedRef(fn);\n  // this ref is necessary b/c useEffect will sometimes miss a paused toggle\n  // orphaning a setTimeout chain in the aether, so relying on it's refresh logic is not reliable.\n  var pausedRef = useCommittedRef(paused);\n  function loop() {\n    var current = new Date().getTime();\n    var delta = current - start;\n    if (pausedRef.current) return;\n    if (delta >= ms && fnRef.current) {\n      fnRef.current();\n      start = new Date().getTime();\n    }\n    cancelAnimationFrame(handle);\n    handle = requestAnimationFrame(loop);\n  }\n  useEffect(function () {\n    handle = requestAnimationFrame(loop);\n    return function () {\n      return cancelAnimationFrame(handle);\n    };\n  }, []);\n}\nexport default useRafInterval;","map":null,"metadata":{},"sourceType":"module"}