{"ast":null,"code":"import _slicedToArray from \"C:\\\\Project\\\\Front_end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useCallback, useState } from 'react';\n\n/**\n * Updates state, partial updates are merged into existing state values\n */\n\n/**\n * Mimics a React class component's state model, of having a single unified\n * `state` object and an updater that merges updates into the existing state, as\n * opposed to replacing it.\n *\n * ```js\n * const [state, setState] = useMergeState({ name: 'Betsy', age: 24 })\n *\n * setState({ name: 'Johan' }) // { name: 'Johan', age: 24 }\n *\n * setState(state => ({ age: state.age + 10 })) // { name: 'Johan', age: 34 }\n * ```\n *\n * @param initialState The initial state object\n */\nexport default function useMergeState(initialState) {\n  var _useState = useState(initialState),\n    _useState2 = _slicedToArray(_useState, 2),\n    state = _useState2[0],\n    setState = _useState2[1];\n  var updater = useCallback(function (update) {\n    if (update === null) return;\n    if (typeof update === 'function') {\n      setState(function (state) {\n        var nextState = update(state);\n        return nextState == null ? state : Object.assign({}, state, nextState);\n      });\n    } else {\n      setState(function (state) {\n        return Object.assign({}, state, update);\n      });\n    }\n  }, [setState]);\n  return [state, updater];\n}","map":null,"metadata":{},"sourceType":"module"}