{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _templateObject, _templateObject2;\nimport React, { useState, useCallback, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash/debounce';\nimport ToggleButton from './ToggleButton';\nimport CloseButton from '../CloseButton';\nimport { useClassNames, KEY_VALUES, mergeRefs } from '../utils';\nimport Plaintext from '../Plaintext';\nimport useToggleCaret from '../utils/useToggleCaret';\nimport TextMask from '../MaskedInput/TextMask';\nimport deprecatePropType from '../utils/deprecatePropType';\nimport Loader from '../Loader';\nimport Stack from '../Stack';\nvar defaultInputMask = [];\nvar PickerToggle = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var activeProp = props.active,\n    _props$as = props.as,\n    Component = _props$as === void 0 ? ToggleButton : _props$as,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'picker-toggle' : _props$classPrefix,\n    children = props.children,\n    _props$caret = props.caret,\n    caret = _props$caret === void 0 ? true : _props$caret,\n    className = props.className,\n    disabled = props.disabled,\n    readOnly = props.readOnly,\n    plaintext = props.plaintext,\n    hasValue = props.hasValue,\n    editable = props.editable,\n    _props$loading = props.loading,\n    loading = _props$loading === void 0 ? false : _props$loading,\n    cleanableProp = props.cleanable,\n    _props$tabIndex = props.tabIndex,\n    tabIndexProp = _props$tabIndex === void 0 ? editable ? -1 : 0 : _props$tabIndex,\n    id = props.id,\n    value = props.value,\n    inputPlaceholder = props.inputPlaceholder,\n    inputValueProp = props.inputValue,\n    _props$inputMask = props.inputMask,\n    inputMask = _props$inputMask === void 0 ? defaultInputMask : _props$inputMask,\n    onInputChange = props.onInputChange,\n    onInputPressEnter = props.onInputPressEnter,\n    onInputBlur = props.onInputBlur,\n    onInputFocus = props.onInputFocus,\n    onClean = props.onClean,\n    onFocus = props.onFocus,\n    onBlur = props.onBlur,\n    _props$placement = props.placement,\n    placement = _props$placement === void 0 ? 'bottomStart' : _props$placement,\n    caretComponent = props.caretComponent,\n    _props$caretAs = props.caretAs,\n    caretAs = _props$caretAs === void 0 ? caretComponent : _props$caretAs,\n    label = props.label,\n    name = props.name,\n    rest = _objectWithoutPropertiesLoose(props, [\"active\", \"as\", \"classPrefix\", \"children\", \"caret\", \"className\", \"disabled\", \"readOnly\", \"plaintext\", \"hasValue\", \"editable\", \"loading\", \"cleanable\", \"tabIndex\", \"id\", \"value\", \"inputPlaceholder\", \"inputValue\", \"inputMask\", \"onInputChange\", \"onInputPressEnter\", \"onInputBlur\", \"onInputFocus\", \"onClean\", \"onFocus\", \"onBlur\", \"placement\", \"caretComponent\", \"caretAs\", \"label\", \"name\"]);\n  var inputRef = useRef(null);\n  var comboboxRef = useRef(null);\n  var _useState = useState(false),\n    activeState = _useState[0],\n    setActive = _useState[1];\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    merge = _useClassNames.merge,\n    prefix = _useClassNames.prefix;\n  var getInputValue = useCallback(function () {\n    return typeof inputValueProp === 'undefined' ? Array.isArray(value) ? value.join(',') : value : inputValueProp;\n  }, [inputValueProp, value]);\n  var _useState2 = useState(getInputValue),\n    inputValue = _useState2[0],\n    setInputValue = _useState2[1];\n  useEffect(function () {\n    if (comboboxRef.current) {\n      var _value = getInputValue();\n      setInputValue(_value);\n    }\n  }, [getInputValue]);\n  var classes = merge(className, withClassPrefix({\n    active: activeProp || activeState\n  }));\n  var handleFocus = useCallback(function (event) {\n    if (!loading) {\n      setActive(true);\n    }\n    if (editable) {\n      // Avoid firing the onFocus event twice when DatePicker and DateRangePicker allow keyboard input.\n      if (event.target === inputRef.current) {\n        onFocus === null || onFocus === void 0 ? void 0 : onFocus(event);\n      } // Force the input to be focused and editable.\n\n      if (document.activeElement === comboboxRef.current) {\n        var _inputRef$current;\n        (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n      }\n    } else {\n      onFocus === null || onFocus === void 0 ? void 0 : onFocus(event);\n    }\n  }, [editable, loading, onFocus]);\n  var handleBlur = useCallback(function (event) {\n    if (inputRef.current && !editable) {\n      setActive(false);\n    } // When activeElement is an input, it remains active.\n\n    if (editable && inputRef.current && document.activeElement !== inputRef.current) {\n      setActive(false);\n    }\n    onBlur === null || onBlur === void 0 ? void 0 : onBlur(event);\n  }, [editable, onBlur]);\n  var handleInputBlur = function handleInputBlur(event) {\n    setInputValue(getInputValue());\n    onInputBlur === null || onInputBlur === void 0 ? void 0 : onInputBlur(event);\n  };\n  var handleClean = useCallback(function (event) {\n    var _inputRef$current2, _comboboxRef$current;\n    event.stopPropagation();\n    onClean === null || onClean === void 0 ? void 0 : onClean(event); // When the value is cleared, the current component is still in focus.\n\n    editable ? (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 ? void 0 : _inputRef$current2.focus() : (_comboboxRef$current = comboboxRef.current) === null || _comboboxRef$current === void 0 ? void 0 : _comboboxRef$current.focus();\n  }, [editable, onClean]);\n  var handleInputChange = useCallback(function (event) {\n    var _event$target;\n    var value = (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.value;\n    setInputValue(value);\n    onInputChange === null || onInputChange === void 0 ? void 0 : onInputChange(value, event);\n  }, [onInputChange]);\n  var handleInputKeyDown = useCallback(function (event) {\n    if (editable && event.key === KEY_VALUES.ENTER) {\n      onInputPressEnter === null || onInputPressEnter === void 0 ? void 0 : onInputPressEnter(event);\n    }\n  }, [onInputPressEnter, editable]);\n  var renderInput = useCallback(function (ref, props) {\n    return /*#__PURE__*/React.createElement(\"input\", _extends({\n      ref: mergeRefs(inputRef, ref),\n      name: name,\n      style: {\n        pointerEvents: editable ? undefined : 'none'\n      }\n    }, props));\n  }, [editable, name]);\n  var ToggleCaret = useToggleCaret(placement);\n  var Caret = caretAs !== null && caretAs !== void 0 ? caretAs : ToggleCaret;\n  if (plaintext) {\n    return /*#__PURE__*/React.createElement(Plaintext, {\n      ref: ref,\n      localeKey: \"notSelected\"\n    }, hasValue ? children : null);\n  }\n  var showCleanButton = cleanableProp && hasValue && !readOnly; // When the component is read-only or disabled, the input is not interactive.\n\n  var inputFocused = readOnly || disabled ? false : editable && activeState;\n  var tabIndex = disabled ? undefined : tabIndexProp;\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    role: \"combobox\",\n    \"aria-haspopup\": \"listbox\",\n    \"aria-expanded\": activeProp,\n    \"aria-disabled\": disabled,\n    \"aria-owns\": id ? id + \"-listbox\" : undefined\n  }, rest, {\n    ref: mergeRefs(comboboxRef, ref),\n    disabled: disabled,\n    tabIndex: tabIndex,\n    className: classes,\n    onFocus: !disabled ? handleFocus : null // The debounce is set to 200 to solve the flicker caused by the switch between input and div.\n    ,\n\n    onBlur: !disabled ? debounce(handleBlur, 200) : null\n  }), /*#__PURE__*/React.createElement(Stack, null, label && /*#__PURE__*/React.createElement(Stack.Item, null, /*#__PURE__*/React.createElement(\"span\", {\n    className: prefix('label')\n  }, label)), /*#__PURE__*/React.createElement(Stack.Item, {\n    grow: 1,\n    style: {\n      overflow: 'hidden'\n    }\n  }, loading ? /*#__PURE__*/React.createElement(Loader, {\n    style: {\n      display: 'block',\n      padding: '1px 0'\n    },\n    \"data-testid\": \"spinner\"\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TextMask, {\n    mask: inputMask,\n    value: Array.isArray(inputValue) ? inputValue.toString() : inputValue,\n    onBlur: handleInputBlur,\n    onFocus: onInputFocus,\n    onChange: handleInputChange,\n    onKeyDown: handleInputKeyDown,\n    id: id,\n    \"aria-hidden\": !inputFocused,\n    readOnly: !inputFocused,\n    disabled: disabled,\n    \"aria-controls\": id ? id + \"-listbox\" : undefined,\n    tabIndex: editable ? 0 : -1,\n    className: prefix('textbox', {\n      'read-only': !inputFocused\n    }),\n    placeholder: inputPlaceholder,\n    render: renderInput\n  }), children ? /*#__PURE__*/React.createElement(\"span\", {\n    className: prefix(hasValue ? 'value' : 'placeholder'),\n    \"aria-placeholder\": typeof children === 'string' ? children : undefined\n  }, children) : null)), showCleanButton && /*#__PURE__*/React.createElement(CloseButton, {\n    className: prefix(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"clean\"]))),\n    tabIndex: -1,\n    locale: {\n      closeLabel: 'Clear'\n    },\n    onClick: handleClean\n  }), caret && !showCleanButton && /*#__PURE__*/React.createElement(Caret, {\n    className: prefix(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"caret\"])))\n  })));\n});\nPickerToggle.displayName = 'PickerToggle';\nPickerToggle.propTypes = {\n  classPrefix: PropTypes.string,\n  hasValue: PropTypes.bool,\n  cleanable: PropTypes.bool,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  caret: PropTypes.bool,\n  as: PropTypes.elementType,\n  onClean: PropTypes.func,\n  active: PropTypes.bool,\n  readOnly: PropTypes.bool,\n  disabled: PropTypes.bool,\n  plaintext: PropTypes.bool,\n  caretComponent: deprecatePropType(PropTypes.elementType, 'Use `caretAs` instead.'),\n  caretAs: PropTypes.elementType\n};\nexport default PickerToggle;","map":null,"metadata":{},"sourceType":"module"}