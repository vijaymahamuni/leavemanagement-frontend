{"ast":null,"code":"import pick from 'lodash/pick';\nimport omitBy from 'lodash/omitBy';\nimport getHours from 'date-fns/getHours';\nimport setHours from 'date-fns/setHours';\nimport getDay from 'date-fns/getDay';\nimport getMinutes from 'date-fns/getMinutes';\nimport getSeconds from 'date-fns/getSeconds';\nimport addDays from 'date-fns/addDays';\nimport set from 'date-fns/set';\nexport { default as addDays } from 'date-fns/addDays';\nexport { default as addMonths } from 'date-fns/addMonths';\nexport { default as compareAsc } from 'date-fns/compareAsc';\nexport { default as endOfDay } from 'date-fns/endOfDay';\nexport { default as endOfISOWeek } from 'date-fns/endOfISOWeek';\nexport { default as endOfMonth } from 'date-fns/endOfMonth';\nexport { default as endOfWeek } from 'date-fns/endOfWeek';\nexport { default as format } from 'date-fns/format';\nexport { default as getDate } from 'date-fns/getDate';\nexport { default as getDay } from 'date-fns/getDay';\nexport { default as getDaysInMonth } from 'date-fns/getDaysInMonth';\nexport { default as getHours } from 'date-fns/getHours';\nexport { default as getMinutes } from 'date-fns/getMinutes';\nexport { default as getMonth } from 'date-fns/getMonth';\nexport { default as getSeconds } from 'date-fns/getSeconds';\nexport { default as getYear } from 'date-fns/getYear';\nexport { default as isAfter } from 'date-fns/isAfter';\nexport { default as isBefore } from 'date-fns/isBefore';\nexport { default as isEqual } from 'date-fns/isEqual';\nexport { default as isSameDay } from 'date-fns/isSameDay';\nexport { default as isSameMonth } from 'date-fns/isSameMonth';\nexport { default as isSameSecond } from 'date-fns/isSameSecond';\nexport { default as parse } from 'date-fns/parse';\nexport { default as parseISO } from 'date-fns/parseISO';\nexport { default as setDate } from 'date-fns/setDate';\nexport { default as setHours } from 'date-fns/setHours';\nexport { default as setMinutes } from 'date-fns/setMinutes';\nexport { default as setMonth } from 'date-fns/setMonth';\nexport { default as setSeconds } from 'date-fns/setSeconds';\nexport { default as setYear } from 'date-fns/setYear';\nexport { default as startOfDay } from 'date-fns/startOfDay';\nexport { default as startOfISOWeek } from 'date-fns/startOfISOWeek';\nexport { default as startOfMonth } from 'date-fns/startOfMonth';\nexport { default as startOfWeek } from 'date-fns/startOfWeek';\nexport { default as subDays } from 'date-fns/subDays';\nexport { default as isMatch } from 'date-fns/isMatch';\nexport { default as isValid } from 'date-fns/isValid';\nexport { default as set } from 'date-fns/set';\nexport { default as differenceInCalendarMonths } from 'date-fns/differenceInCalendarMonths';\nvar disabledTimeProps = ['disabledHours', 'disabledMinutes', 'disabledSeconds'];\nvar hideTimeProps = ['hideHours', 'hideMinutes', 'hideSeconds'];\nexport var calendarOnlyProps = disabledTimeProps.concat(hideTimeProps);\nfunction validTime(calendarProps, date) {\n  if (!date) {\n    return false;\n  }\n  return Object.keys(calendarProps).some(function (key) {\n    if (/(Hours)/.test(key)) {\n      var _calendarProps$key;\n      return (_calendarProps$key = calendarProps[key]) === null || _calendarProps$key === void 0 ? void 0 : _calendarProps$key.call(calendarProps, getHours(date), date);\n    }\n    if (/(Minutes)/.test(key)) {\n      var _calendarProps$key2;\n      return (_calendarProps$key2 = calendarProps[key]) === null || _calendarProps$key2 === void 0 ? void 0 : _calendarProps$key2.call(calendarProps, getMinutes(date), date);\n    }\n    if (/(Seconds)/.test(key)) {\n      var _calendarProps$key3;\n      return (_calendarProps$key3 = calendarProps[key]) === null || _calendarProps$key3 === void 0 ? void 0 : _calendarProps$key3.call(calendarProps, getSeconds(date), date);\n    }\n    return false;\n  });\n}\n/**\n * Verify that the time is valid.\n *\n * @param props\n * @param date\n */\n\nexport function disabledTime(props, date) {\n  var calendarProps = pick(props, disabledTimeProps);\n  return validTime(calendarProps, date);\n}\nexport var omitHideDisabledProps = function omitHideDisabledProps(props) {\n  return omitBy(props, function (_val, key) {\n    return key.startsWith('disabled') || key.startsWith('hide');\n  });\n};\nexport var shouldRenderTime = function shouldRenderTime(format) {\n  return /([Hhms])/.test(format);\n};\nexport var shouldRenderMonth = function shouldRenderMonth(format) {\n  return /[Yy]/.test(format) && /[ML]/.test(format);\n};\nexport var shouldRenderDate = function shouldRenderDate(format) {\n  return /[Yy]/.test(format) && /[ML]/.test(format) && /[Dd]/.test(format);\n}; // for date-fns v1 and v2\n\nexport var shouldOnlyRenderTime = function shouldOnlyRenderTime(format) {\n  return /([Hhms])/.test(format) && !/([YyMDd])/.test(format);\n}; // for date-fns v1 and v2\n\n/**\n * Get all weeks of this month\n * @params monthDate\n * @return date[]\n */\n\nexport function getMonthView(monthDate, isoWeek) {\n  var firstDayOfMonth = getDay(monthDate);\n  var distance = 0 - firstDayOfMonth;\n  if (isoWeek) {\n    distance = 1 - firstDayOfMonth;\n    if (firstDayOfMonth === 0) {\n      distance = -6;\n    }\n  }\n  var firstWeekendDate = addDays(monthDate, distance);\n  var weeks = [firstWeekendDate];\n  var nextWeekendDate = addDays(firstWeekendDate, 7);\n  weeks.push(nextWeekendDate);\n  while (weeks.length < 6) {\n    nextWeekendDate = addDays(nextWeekendDate, 7);\n    weeks.push(nextWeekendDate);\n  }\n  return weeks;\n}\nexport function getDateMask(formatStr) {\n  return Array.from(formatStr).map(function (i) {\n    return i.match(/[A-Za-z]/) ? /[\\d|A-Za-z]/ : i;\n  });\n}\n/**\n * Copy the time of one date to another\n */\n\nexport function copyTime(_ref) {\n  var from = _ref.from,\n    to = _ref.to;\n  return set(to, {\n    hours: getHours(from),\n    minutes: getMinutes(from),\n    seconds: getSeconds(from)\n  });\n}\n/**\n * Swap two dates without swapping the time.\n */\n\nexport function reverseDateRangeOmitTime(dateRange) {\n  var start = dateRange[0],\n    end = dateRange[1];\n  if (start && end) {\n    return [copyTime({\n      from: start,\n      to: end\n    }), copyTime({\n      from: end,\n      to: start\n    })];\n  }\n  return dateRange;\n}\n/**\n * Get the time with AM and PM reversed.\n */\n\nexport var getReversedTimeMeridian = function getReversedTimeMeridian(date) {\n  var clonedDate = new Date(date.valueOf());\n  var hours = getHours(clonedDate);\n  var nextHours = hours >= 12 ? hours - 12 : hours + 12;\n  return setHours(clonedDate, nextHours);\n};","map":null,"metadata":{},"sourceType":"module"}