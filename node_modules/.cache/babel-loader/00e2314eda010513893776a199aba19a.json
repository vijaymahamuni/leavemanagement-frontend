{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n  return r;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// third-party\nvar react_1 = __importDefault(require(\"react\"));\n// components\nvar SuccessIcon_1 = __importDefault(require(\"./SuccessIcon\"));\nvar ErrorIcon_1 = __importDefault(require(\"./ErrorIcon\"));\nvar InfoIcon_1 = __importDefault(require(\"./InfoIcon\"));\nvar WarningIcon_1 = __importDefault(require(\"./WarningIcon\"));\nvar CustomIcon_1 = __importDefault(require(\"./CustomIcon\"));\nvar Buttons_1 = __importDefault(require(\"./Buttons\"));\nvar Input_1 = __importDefault(require(\"./Input\"));\nvar ValidationMessage_1 = __importDefault(require(\"./ValidationMessage\"));\nvar Title_1 = __importDefault(require(\"./Title\"));\nvar Content_1 = __importDefault(require(\"./Content\"));\nvar Overlay_1 = __importDefault(require(\"./Overlay\"));\n// other\nvar styles = __importStar(require(\"../styles/SweetAlertStyles\"));\nvar Patterns = __importStar(require(\"../constants/patterns\"));\nvar prop_types_1 = require(\"../prop-types\");\nvar default_props_1 = require(\"../default-props\");\nvar SWEET_ALERT_DEFAULT_STYLES = styles.sweetAlert;\nvar _resetting = {};\nvar debugLogger = function debugLogger() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  // uncomment the next line to get some debugging logs.\n  // console.log(...args);\n};\n\nvar SweetAlert = /** @class */function (_super) {\n  __extends(SweetAlert, _super);\n  function SweetAlert(props) {\n    var _this = _super.call(this, props) || this;\n    _this.inputElement = null;\n    _this.unsupportedProp = function (oldProp, message) {\n      try {\n        console.warn(\"react-bootstrap-sweetalert: Unsupported prop '\" + oldProp + \"'. Please \" + message);\n      } catch (e) {\n        // do nothing\n      }\n    };\n    _this.focusInput = function () {\n      debugLogger('inputElement', _this.inputElement);\n      if (_this.inputElement) {\n        debugLogger('inputElement trying to focus', _this.inputElement);\n        try {\n          _this.inputElement.focus();\n        } catch (e) {\n          debugLogger('inputElement focus error', e);\n          // whoops\n        }\n      }\n    };\n\n    _this.getIcon = function () {\n      switch (_this.state.type) {\n        case 'danger':\n        case 'error':\n          return react_1.default.createElement(ErrorIcon_1.default, null);\n        case 'warning':\n          return react_1.default.createElement(WarningIcon_1.default, null);\n        case 'info':\n          return react_1.default.createElement(InfoIcon_1.default, null);\n        case 'success':\n          return react_1.default.createElement(SuccessIcon_1.default, null);\n        case 'custom':\n          if (_this.props.customIcon) {\n            if (typeof _this.props.customIcon == 'string') {\n              return react_1.default.createElement(CustomIcon_1.default, {\n                iconUrl: _this.props.customIcon\n              });\n            }\n            return _this.props.customIcon;\n          }\n          return null;\n        default:\n          return null;\n      }\n    };\n    _this.onChangeInput = function (e) {\n      var target = e.target;\n      _this.setState({\n        inputValue: target.value,\n        showValidationMessage: false\n      });\n    };\n    _this.isValidInput = function () {\n      if (!_this.props.required) {\n        return true;\n      }\n      var regex = _this.props.validationRegex || (_this.props.inputType === 'email' ? Patterns.emailRegex : Patterns.defaultRegex);\n      return regex.test(_this.state.inputValue);\n    };\n    _this.isDisabled = function () {\n      return _this.props.onCancel && _this.props.disabled;\n    };\n    _this.onAlertClose = function (callback) {\n      _resetting[_this.state.id] = true;\n      debugLogger('onAlertClose resetting state');\n      _this.setState(__assign(__assign({}, SweetAlert.getDefaultState()), {\n        id: _this.state.id\n      }), function () {\n        _resetting[_this.state.id] = false;\n        callback();\n      });\n    };\n    _this.beforeCloseAlert = function (closingAction, callback) {\n      debugLogger('in beforeCloseAlert: setting show to false');\n      _this.setState({\n        show: false,\n        closingAction: closingAction\n      }, function () {\n        debugLogger('state updated', _this.state.show);\n        if (!_this.state.show) {\n          debugLogger('invoking callback');\n          callback();\n        }\n      });\n    };\n    _this.onConfirm = function (handleCloseAnimations) {\n      if (handleCloseAnimations === void 0) {\n        handleCloseAnimations = true;\n      }\n      if (_this.isDisabled()) {\n        return;\n      }\n      // if this is an input alert, then we will send the input value to the props.onConfirm function\n      var isInput = _this.state.type === 'input';\n      var inputValue = _this.state.inputValue;\n      // if this is a controlled alert, then we will send the dependencies value to the props.onConfirm function\n      var isControlled = _this.state.type === 'controlled';\n      var dependencies = __spreadArrays(_this.state.dependencies);\n      if (isInput && !_this.isValidInput()) {\n        _this.setState({\n          showValidationMessage: true\n        });\n        return;\n      }\n      var confirm = function confirm() {\n        debugLogger('in confirm callback');\n        if (isInput) {\n          _this.onAlertClose(function () {\n            _this.props.onConfirm(inputValue);\n          });\n        } else if (isControlled) {\n          _this.onAlertClose(function () {\n            _this.props.onConfirm(dependencies);\n          });\n        } else {\n          _this.onAlertClose(function () {\n            return _this.props.onConfirm();\n          });\n        }\n      };\n      if (handleCloseAnimations) {\n        debugLogger('calling beforeCloseAlert');\n        _this.beforeCloseAlert('confirm', function () {\n          return confirm();\n        });\n      } else {\n        confirm();\n      }\n    };\n    _this.onCancel = function (handleCloseAnimations) {\n      if (handleCloseAnimations === void 0) {\n        handleCloseAnimations = true;\n      }\n      var cancel = function cancel() {\n        _this.onAlertClose(function () {\n          if (_this.props.onCancel) {\n            _this.props.onCancel();\n          }\n        });\n      };\n      if (handleCloseAnimations) {\n        _this.beforeCloseAlert('cancel', function () {\n          return cancel();\n        });\n      } else {\n        cancel();\n      }\n    };\n    _this.onInputKeyDown = function (e) {\n      if (e.keyCode == 13) {\n        e.stopPropagation();\n        _this.onConfirm();\n      }\n    };\n    _this.onKeyDown = function (e) {\n      if (e.keyCode == 27) {\n        if (_this.props.allowEscape && _this.props.onCancel) {\n          e.stopPropagation();\n          _this.onCancel();\n        }\n      }\n    };\n    _this.onClickInside = function (e) {\n      e.stopPropagation();\n    };\n    _this.onClickOutside = function () {\n      if (_this.props.closeOnClickOutside && _this.props.onCancel) {\n        _this.onCancel();\n      }\n    };\n    _this.setAutoFocusInputRef = function (element) {\n      _this.inputElement = element;\n    };\n    _this.getComposedStyle = function () {\n      return Object.assign({}, SWEET_ALERT_DEFAULT_STYLES, _this.props.style, {\n        animation: _this.state.animation\n      });\n    };\n    _this.getAlertContent = function () {\n      // Support for render props for content of alert\n      if (typeof _this.props.children === 'function') {\n        var renderProps = {\n          onEnterKeyDownConfirm: function onEnterKeyDownConfirm(event) {\n            if (event.key === 'Enter') {\n              event.preventDefault();\n              event.stopPropagation();\n              _this.onConfirm();\n            }\n          },\n          confirm: function confirm() {\n            return _this.onConfirm();\n          },\n          cancel: function cancel() {\n            return _this.onCancel();\n          },\n          setAutoFocusInputRef: _this.setAutoFocusInputRef.bind(_this)\n        };\n        return _this.props.children(renderProps);\n      }\n      return _this.props.children;\n    };\n    _this.getCloseButton = function () {\n      if (!_this.props.showCloseButton || !_this.props.onCancel) {\n        return null;\n      }\n      return react_1.default.createElement(\"span\", {\n        className: 'btn',\n        style: Object.assign({}, styles.closeButton, _this.props.closeBtnStyle),\n        onClick: function onClick() {\n          return _this.onCancel();\n        }\n      }, \"x\");\n    };\n    _this.getInputField = function () {\n      if (_this.state.type !== 'input') {\n        return null;\n      }\n      return react_1.default.createElement(Input_1.default, __assign({}, _this.props, _this.state, {\n        type: _this.state.type,\n        onInputKeyDown: _this.onInputKeyDown,\n        onChangeInput: _this.onChangeInput\n      }));\n    };\n    _this.getValidationMessage = function () {\n      if (!_this.state.showValidationMessage) {\n        return null;\n      }\n      return react_1.default.createElement(ValidationMessage_1.default, __assign({}, _this.props));\n    };\n    _this.getButtons = function () {\n      return react_1.default.createElement(Buttons_1.default, __assign({}, _this.props, {\n        type: _this.state.type,\n        onConfirm: _this.onConfirm,\n        onCancel: _this.onCancel,\n        focusConfirmBtn: _this.state.focusConfirmBtn,\n        focusCancelBtn: _this.state.focusCancelBtn,\n        disabled: _this.isDisabled()\n      }));\n    };\n    _this.getInjectedStyles = function () {\n      return react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(\"style\", {\n        type: \"text/css\",\n        dangerouslySetInnerHTML: {\n          __html: \"\\n                body.sweetalert-overflow-hidden {\\n                  overflow: hidden;\\n                }\\n                body .sweet-alert button {\\n                  outline: none !important;\\n                }\\n              \"\n        }\n      }), react_1.default.createElement(\"style\", {\n        type: \"text/css\"\n      }, \"@-webkit-keyframes showSweetAlert {  0% {    transform: scale(0.7);    -webkit-transform: scale(0.7);  }  45% {    transform: scale(1.05);    -webkit-transform: scale(1.05);  }  80% {    transform: scale(0.95);    -webkit-tranform: scale(0.95);  }  100% {    transform: scale(1);    -webkit-transform: scale(1);  }}@keyframes showSweetAlert {  0% {    transform: scale(0.7);    -webkit-transform: scale(0.7);  }  45% {    transform: scale(1.05);    -webkit-transform: scale(1.05);  }  80% {    transform: scale(0.95);    -webkit-tranform: scale(0.95);  }  100% {    transform: scale(1);    -webkit-transform: scale(1);  }}@-webkit-keyframes hideSweetAlert {  0% {    transform: scale(1);    -webkit-transform: scale(1);  }  100% {    transform: scale(0.4);    -webkit-transform: scale(0.4);  }}@keyframes hideSweetAlert {  0% {    transform: scale(1);    -webkit-transform: scale(1);  }  100% {    transform: scale(0.4);    -webkit-transform: scale(0.4);  }}@-webkit-keyframes animateSuccessTip {  0% {    width: 0;    left: 1px;    top: 19px;  }  54% {    width: 0;    left: 1px;    top: 19px;  }  70% {    width: 50px;    left: -8px;    top: 37px;  }  84% {    width: 17px;    left: 21px;    top: 48px;  }  100% {    width: 25px;    left: 14px;    top: 45px;  }}@keyframes animateSuccessTip {  0% {    width: 0;    left: 1px;    top: 19px;  }  54% {    width: 0;    left: 1px;    top: 19px;  }  70% {    width: 50px;    left: -8px;    top: 37px;  }  84% {    width: 17px;    left: 21px;    top: 48px;  }  100% {    width: 25px;    left: 14px;    top: 45px;  }}@-webkit-keyframes animateSuccessLong {  0% {    width: 0;    right: 46px;    top: 54px;  }  65% {    width: 0;    right: 46px;    top: 54px;  }  84% {    width: 55px;    right: 0px;    top: 35px;  }  100% {    width: 47px;    right: 8px;    top: 38px;  }}@keyframes animateSuccessLong {  0% {    width: 0;    right: 46px;    top: 54px;  }  65% {    width: 0;    right: 46px;    top: 54px;  }  84% {    width: 55px;    right: 0px;    top: 35px;  }  100% {    width: 47px;    right: 8px;    top: 38px;  }}@-webkit-keyframes rotatePlaceholder {  0% {    transform: rotate(-45deg);    -webkit-transform: rotate(-45deg);  }  5% {    transform: rotate(-45deg);    -webkit-transform: rotate(-45deg);  }  12% {    transform: rotate(-405deg);    -webkit-transform: rotate(-405deg);  }  100% {    transform: rotate(-405deg);    -webkit-transform: rotate(-405deg);  }}@keyframes rotatePlaceholder {  0% {    transform: rotate(-45deg);    -webkit-transform: rotate(-45deg);  }  5% {    transform: rotate(-45deg);    -webkit-transform: rotate(-45deg);  }  12% {    transform: rotate(-405deg);    -webkit-transform: rotate(-405deg);  }  100% {    transform: rotate(-405deg);    -webkit-transform: rotate(-405deg);  }}@-webkit-keyframes animateErrorIcon {  0% {    transform: rotateX(100deg);    -webkit-transform: rotateX(100deg);    opacity: 0;  }  100% {    transform: rotateX(0deg);    -webkit-transform: rotateX(0deg);    opacity: 1;  }}@keyframes animateErrorIcon {  0% {    transform: rotateX(100deg);    -webkit-transform: rotateX(100deg);    opacity: 0;  }  100% {    transform: rotateX(0deg);    -webkit-transform: rotateX(0deg);    opacity: 1;  }}@-webkit-keyframes animateXMark {  0% {    transform: scale(0.4);    -webkit-transform: scale(0.4);    margin-top: 26px;    opacity: 0;  }  50% {    transform: scale(0.4);    -webkit-transform: scale(0.4);    margin-top: 26px;    opacity: 0;  }  80% {    transform: scale(1.15);    -webkit-transform: scale(1.15);    margin-top: -6px;  }  100% {    transform: scale(1);    -webkit-transform: scale(1);    margin-top: 0;    opacity: 1;  }}@keyframes animateXMark {  0% {    transform: scale(0.4);    -webkit-transform: scale(0.4);    margin-top: 26px;    opacity: 0;  }  50% {    transform: scale(0.4);    -webkit-transform: scale(0.4);    margin-top: 26px;    opacity: 0;  }  80% {    transform: scale(1.15);    -webkit-transform: scale(1.15);    margin-top: -6px;  }  100% {    transform: scale(1);    -webkit-transform: scale(1);    margin-top: 0;    opacity: 1;  }}@-webkit-keyframes pulseWarning {  0% {    border-color: #F8D486;  }  100% {    border-color: #F8BB86;  }}@keyframes pulseWarning {  0% {    border-color: #F8D486;  }  100% {    border-color: #F8BB86;  }}@-webkit-keyframes pulseWarningIns {  0% {    background-color: #F8D486;  }  100% {    background-color: #F8BB86;  }}@keyframes pulseWarningIns {  0% {    background-color: #F8D486;  }  100% {    background-color: #F8BB86;  }}\"));\n    };\n    if (_this.props.beforeUpdate) {\n      _this.unsupportedProp('beforeUpdate', 'use props.afterUpdate');\n    }\n    var newState = Object.assign(SweetAlert.getDefaultState(), {\n      hideTimeoutHandlerFunc: _this.hideTimeoutHandler.bind(_this)\n    });\n    if (_this.props.defaultValue != null) {\n      newState.inputValue = _this.props.defaultValue;\n    }\n    _this.state = newState;\n    _this.props.beforeMount();\n    return _this;\n  }\n  SweetAlert.prototype.componentDidMount = function () {\n    document.body.classList.add('sweetalert-overflow-hidden');\n    this.focusInput();\n    if (this.props.afterMount) {\n      this.props.afterMount();\n    }\n  };\n  SweetAlert.generateId = function () {\n    return '' + Date.now() + Math.ceil(Math.random() * 10000000000) + Math.ceil(Math.random() * 10000000000);\n  };\n  SweetAlert.getDefaultState = function () {\n    return {\n      id: SweetAlert.generateId(),\n      show: true,\n      focusConfirmBtn: true,\n      focusCancelBtn: false,\n      inputValue: '',\n      showValidationMessage: false,\n      timer: null,\n      animation: \"\",\n      prevTimeout: 0,\n      closingAction: null,\n      dependencies: []\n    };\n  };\n  SweetAlert.getDerivedStateFromProps = function (nextProps, nextState) {\n    if (_resetting[nextState.id]) {\n      return {};\n    }\n    var newState = {};\n    var typeChanged = nextState.type !== SweetAlert.getTypeFromProps(nextProps);\n    var dependenciesChanged = nextState.dependencies !== nextProps.dependencies;\n    var timeoutChanged = nextState.prevTimeout !== nextProps.timeout;\n    // if the type of the alert changed, or the dependencies changed, then update the state from props\n    if (typeChanged || dependenciesChanged) {\n      newState = __assign(__assign({}, newState), SweetAlert.getStateFromProps(nextProps));\n    }\n    // if the state is changing, or the timeout changed, then reset the timeout timer\n    if (JSON.stringify(newState) !== '{}' || timeoutChanged) {\n      newState = __assign(__assign({}, newState), SweetAlert.handleTimeout(nextProps, nextState.timer));\n    }\n    // return the partially updated state\n    return __assign(__assign({}, newState), SweetAlert.handleAnimState(nextProps, nextState, nextState.hideTimeoutHandlerFunc));\n  };\n  SweetAlert.prototype.componentDidUpdate = function (prevProps, prevState) {\n    if (this.props.beforeUpdate) {\n      this.props.beforeUpdate(prevProps, prevState);\n    }\n    if (!prevState.show && this.state.show) {\n      this.focusInput();\n    }\n    this.props.afterUpdate(this.props, this.state);\n  };\n  SweetAlert.prototype.componentWillUnmount = function () {\n    document.body.classList.remove('sweetalert-overflow-hidden');\n    if (this.state.timer) {\n      clearTimeout(this.state.timer);\n    }\n    if (this.props.beforeUnmount) {\n      this.props.beforeUnmount();\n    }\n  };\n  SweetAlert.prototype.hideTimeoutHandler = function (time) {\n    var _this = this;\n    setTimeout(function () {\n      var closingAction = _this.state.closingAction;\n      /**\n       * Removing the closing action (shouldn't trigger another animation timeout)\n       */\n      _this.setState({\n        show: false,\n        closingAction: null\n      }, function () {\n        // handle the action that was started before the closing animation was started\n        switch (closingAction) {\n          case 'confirm':\n            _this.onConfirm(false);\n            break;\n          case 'cancel':\n            _this.onCancel(false);\n            break;\n          default:\n            break;\n        }\n      });\n    }, time);\n  };\n  ;\n  SweetAlert.handleTimeout = function (props, currentTimer) {\n    if (currentTimer) {\n      clearTimeout(currentTimer);\n    }\n    if (props.timeout && props.timeout > 0) {\n      var timer = setTimeout(function () {\n        return props.onConfirm();\n      }, props.timeout);\n      return {\n        timer: timer,\n        prevTimeout: props.timeout\n      };\n    }\n    return null;\n  };\n  SweetAlert.isAnimation = function (animProp) {\n    return animProp && typeof animProp !== 'boolean';\n  };\n  SweetAlert.animationFromProp = function (animProp) {\n    return animProp.name + ' ' + animProp.duration + 'ms';\n  };\n  SweetAlert.handleAnimState = function (props, state, hideTimeout) {\n    var userDefinedShow = typeof props.show === 'boolean';\n    var show = userDefinedShow && !state.closingAction ? props.show : state.show;\n    var animation = '';\n    if (show) {\n      if (props.openAnim) {\n        if (SweetAlert.isAnimation(props.openAnim)) {\n          animation = SweetAlert.animationFromProp(props.openAnim);\n        } else if (SweetAlert.isAnimation(SweetAlert.defaultProps.openAnim)) {\n          animation = SweetAlert.animationFromProp(SweetAlert.defaultProps.openAnim);\n        }\n      }\n    } else if (state.closingAction && props.closeAnim) {\n      var animProp = void 0;\n      if (SweetAlert.isAnimation(props.closeAnim)) {\n        animProp = props.closeAnim;\n      } else if (SweetAlert.isAnimation(SweetAlert.defaultProps.closeAnim)) {\n        animProp = SweetAlert.defaultProps.closeAnim;\n      }\n      if (animProp) {\n        animation = SweetAlert.animationFromProp(animProp);\n        hideTimeout(animProp.duration);\n        show = true;\n      }\n    }\n    return {\n      show: show,\n      animation: animation\n    };\n  };\n  ;\n  SweetAlert.prototype.render = function () {\n    if (!this.state.show) {\n      return null;\n    }\n    return react_1.default.createElement(\"div\", null, this.getInjectedStyles(), react_1.default.createElement(Overlay_1.default, {\n      show: !this.props.hideOverlay,\n      onClick: this.onClickOutside,\n      onKeyDown: this.onKeyDown\n    }, react_1.default.createElement(\"div\", {\n      style: this.getComposedStyle(),\n      tabIndex: 0,\n      onKeyDown: this.onKeyDown,\n      onClick: this.onClickInside,\n      className: 'sweet-alert ' + this.props.customClass\n    }, this.getCloseButton(), this.getIcon(), react_1.default.createElement(Title_1.default, null, this.props.title), react_1.default.createElement(Content_1.default, null, this.getAlertContent()), this.getInputField(), this.getValidationMessage(), this.getButtons())));\n  };\n  SweetAlert.propTypes = prop_types_1.SWEET_ALERT_PROP_TYPES;\n  SweetAlert.defaultProps = default_props_1.SWEET_ALERT_DEFAULT_PROPS;\n  SweetAlert.SuccessIcon = SuccessIcon_1.default;\n  SweetAlert.ErrorIcon = ErrorIcon_1.default;\n  SweetAlert.InfoIcon = InfoIcon_1.default;\n  SweetAlert.WarningIcon = WarningIcon_1.default;\n  SweetAlert.CustomIcon = CustomIcon_1.default;\n  SweetAlert.Buttons = Buttons_1.default;\n  SweetAlert.Input = Input_1.default;\n  SweetAlert.ValidationMessage = ValidationMessage_1.default;\n  SweetAlert.Title = Title_1.default;\n  SweetAlert.Content = Content_1.default;\n  SweetAlert.getStateFromProps = function (props) {\n    var type = SweetAlert.getTypeFromProps(props);\n    return {\n      type: type,\n      focusConfirmBtn: props.focusConfirmBtn && type !== 'input',\n      focusCancelBtn: props.focusCancelBtn && type !== 'input',\n      dependencies: props.dependencies\n    };\n  };\n  SweetAlert.getTypeFromProps = function (props) {\n    if (props.type) return props.type;\n    if (props.secondary) return 'secondary';\n    if (props.info) return 'info';\n    if (props.success) return 'success';\n    if (props.warning) return 'warning';\n    if (props.danger || props.error) return 'danger';\n    if (props.input) return 'input';\n    if (props.custom) return 'custom';\n    return 'default';\n  };\n  return SweetAlert;\n}(react_1.default.Component);\nexports.default = SweetAlert;","map":null,"metadata":{},"sourceType":"script"}