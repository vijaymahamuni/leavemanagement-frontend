{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport partial from 'lodash/partial';\nimport { DateUtils, useClassNames, DATERANGE_DISABLED_TARGET, useCustom } from '../utils';\nimport { useCalendarContext } from './CalendarContext';\nvar TableRow = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    className = props.className,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'calendar-table' : _props$classPrefix,\n    _props$weekendDate = props.weekendDate,\n    weekendDate = _props$weekendDate === void 0 ? new Date() : _props$weekendDate,\n    rest = _objectWithoutPropertiesLoose(props, [\"as\", \"className\", \"classPrefix\", \"weekendDate\"]);\n  var _useCalendarContext = useCalendarContext(),\n    _useCalendarContext$d = _useCalendarContext.date,\n    selected = _useCalendarContext$d === void 0 ? new Date() : _useCalendarContext$d,\n    dateRange = _useCalendarContext.dateRange,\n    disabledDate = _useCalendarContext.disabledDate,\n    hoverRangeValue = _useCalendarContext.hoverRangeValue,\n    inSameMonth = _useCalendarContext.inSameMonth,\n    isoWeek = _useCalendarContext.isoWeek,\n    onMouseMove = _useCalendarContext.onMouseMove,\n    onSelect = _useCalendarContext.onSelect,\n    cellClassName = _useCalendarContext.cellClassName,\n    renderCell = _useCalendarContext.renderCell,\n    overrideLocale = _useCalendarContext.locale,\n    showWeekNumbers = _useCalendarContext.showWeekNumbers;\n  var _useCustom = useCustom('Calendar', overrideLocale),\n    locale = _useCustom.locale,\n    formatDate = _useCustom.formatDate;\n  var _useClassNames = useClassNames(classPrefix),\n    prefix = _useClassNames.prefix,\n    merge = _useClassNames.merge;\n  var handleSelect = useCallback(function (date, disabled, event) {\n    if (disabled) {\n      return;\n    }\n    onSelect === null || onSelect === void 0 ? void 0 : onSelect(date, event);\n  }, [onSelect]);\n  var renderDays = function renderDays() {\n    var formatStr = locale.formattedDayPattern;\n    var days = [];\n    var _ref = dateRange || [],\n      selectedStartDate = _ref[0],\n      selectedEndDate = _ref[1];\n    var _ref2 = hoverRangeValue !== null && hoverRangeValue !== void 0 ? hoverRangeValue : [],\n      hoverStartDate = _ref2[0],\n      hoverEndDate = _ref2[1];\n    var isRangeSelectionMode = typeof dateRange !== 'undefined';\n    var todayDate = new Date();\n    for (var i = 0; i < 7; i += 1) {\n      var thisDate = DateUtils.addDays(weekendDate, i);\n      var disabled = disabledDate === null || disabledDate === void 0 ? void 0 : disabledDate(thisDate, dateRange, DATERANGE_DISABLED_TARGET.CALENDAR);\n      var isToday = DateUtils.isSameDay(thisDate, todayDate);\n      var unSameMonth = !(inSameMonth !== null && inSameMonth !== void 0 && inSameMonth(thisDate));\n      var isStartSelected = !unSameMonth && selectedStartDate && DateUtils.isSameDay(thisDate, selectedStartDate);\n      var isEndSelected = !unSameMonth && selectedEndDate && DateUtils.isSameDay(thisDate, selectedEndDate);\n      var isSelected = isRangeSelectionMode ? isStartSelected || isEndSelected : DateUtils.isSameDay(thisDate, selected); // TODO-Doma Move those logic that's for DatePicker/DateRangePicker to a separate component\n      //           Calendar is not supposed to be reused this way\n\n      var inRange = false; // for Selected\n\n      if (selectedStartDate && selectedEndDate) {\n        if (DateUtils.isBefore(thisDate, selectedEndDate) && DateUtils.isAfter(thisDate, selectedStartDate)) {\n          inRange = true;\n        }\n        if (DateUtils.isBefore(thisDate, selectedStartDate) && DateUtils.isAfter(thisDate, selectedEndDate)) {\n          inRange = true;\n        }\n      } // for Hovering\n\n      if (!isSelected && hoverStartDate && hoverEndDate) {\n        if (!DateUtils.isAfter(thisDate, hoverEndDate) && !DateUtils.isBefore(thisDate, hoverStartDate)) {\n          inRange = true;\n        }\n        if (!DateUtils.isAfter(thisDate, hoverStartDate) && !DateUtils.isBefore(thisDate, hoverEndDate)) {\n          inRange = true;\n        }\n      }\n      var _classes = merge(prefix('cell', {\n        'cell-un-same-month': unSameMonth,\n        'cell-is-today': isToday,\n        'cell-selected': isSelected,\n        'cell-selected-start': isStartSelected,\n        'cell-selected-end': isEndSelected,\n        'cell-in-range': !unSameMonth && inRange,\n        'cell-disabled': disabled\n      }), cellClassName === null || cellClassName === void 0 ? void 0 : cellClassName(thisDate));\n      var title = formatDate ? formatDate(thisDate, formatStr) : DateUtils.format(thisDate, formatStr);\n      days.push( /*#__PURE__*/React.createElement(\"div\", {\n        role: \"gridcell\",\n        key: title,\n        \"aria-label\": title,\n        \"aria-selected\": isSelected || undefined,\n        className: _classes\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        role: \"button\",\n        className: prefix('cell-content'),\n        tabIndex: -1,\n        title: isToday ? title + \" (\" + (locale === null || locale === void 0 ? void 0 : locale.today) + \")\" : title,\n        onMouseEnter: !disabled && onMouseMove ? onMouseMove.bind(null, thisDate) : undefined,\n        onClick: partial(handleSelect, thisDate, disabled)\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: prefix('cell-day')\n      }, DateUtils.getDate(thisDate)), renderCell && renderCell(thisDate))));\n    }\n    return days;\n  };\n  var classes = merge(className, prefix('row'));\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    role: \"row\",\n    className: classes\n  }), showWeekNumbers && /*#__PURE__*/React.createElement(\"div\", {\n    className: prefix('cell-week-number'),\n    role: \"rowheader\"\n  }, DateUtils.format(weekendDate, isoWeek ? 'I' : 'w')), renderDays());\n});\nTableRow.displayName = 'CalendarTableRow';\nTableRow.propTypes = {\n  weekendDate: PropTypes.instanceOf(Date),\n  className: PropTypes.string,\n  classPrefix: PropTypes.string\n};\nexport default TableRow;","map":null,"metadata":{},"sourceType":"module"}