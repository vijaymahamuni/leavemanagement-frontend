{"ast":null,"code":"import _groupBy from \"lodash/groupBy\";\nimport { WalkTreeStrategy, flattenTree } from '../utils/treeUtils';\nvar hasSymbol = typeof Symbol === 'function';\nexport var KEY_GROUP = hasSymbol ? Symbol('_$grouped') : '_$grouped';\nexport var KEY_GROUP_TITLE = 'groupTitle';\nexport function getDataGroupBy(data, key, sort) {\n  var groupMap = _groupBy(data, key);\n  var isSort = typeof sort === 'function';\n  var groups = Object.entries(groupMap).map(function (_ref) {\n    var _ref2;\n    var groupTitle = _ref[0],\n      children = _ref[1];\n    return _ref2 = {\n      children: isSort ? children.sort(sort(false)) : children\n    }, _ref2[KEY_GROUP_TITLE] = groupTitle, _ref2[KEY_GROUP] = true, _ref2;\n  });\n  if (isSort) {\n    groups.sort(sort(true));\n  } // Use DFS traverse\n  // Because I want the result to be [group, child, child, group, child, child]\n  // rather than [group, group, child, child, child, child]\n\n  return flattenTree(groups, function (group) {\n    return group.children;\n  }, WalkTreeStrategy.DFS);\n}","map":null,"metadata":{},"sourceType":"module"}