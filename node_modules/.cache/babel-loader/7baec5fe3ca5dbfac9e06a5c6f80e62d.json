{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport OverlayTrigger from '../Overlay/OverlayTrigger';\nimport { createChainedFunction, placementPolyfill, PLACEMENT } from '../utils';\nimport { CustomContext } from '../CustomProvider';\nvar Whisper = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var onOpen = props.onOpen,\n    onClose = props.onClose,\n    onEntered = props.onEntered,\n    onExited = props.onExited,\n    _props$placement = props.placement,\n    placement = _props$placement === void 0 ? 'right' : _props$placement,\n    preventOverflow = props.preventOverflow,\n    rest = _objectWithoutPropertiesLoose(props, [\"onOpen\", \"onClose\", \"onEntered\", \"onExited\", \"placement\", \"preventOverflow\"]);\n  var context = useContext(CustomContext);\n  return /*#__PURE__*/React.createElement(OverlayTrigger, _extends({}, rest, {\n    ref: ref,\n    preventOverflow: preventOverflow,\n    placement: placementPolyfill(placement, context === null || context === void 0 ? void 0 : context.rtl),\n    onEntered: createChainedFunction(onOpen, onEntered),\n    onExited: createChainedFunction(onClose, onExited)\n  }));\n});\nWhisper.displayName = 'Whisper';\nWhisper.propTypes = {\n  onOpen: PropTypes.func,\n  onClose: PropTypes.func,\n  onEntered: PropTypes.func,\n  onExited: PropTypes.func,\n  placement: PropTypes.oneOf(PLACEMENT),\n  /**\n   * Prevent floating element overflow\n   */\n  preventOverflow: PropTypes.bool,\n  /**\n   * Whether enable speaker follow cursor\n   */\n  followCursor: PropTypes.bool\n};\nexport default Whisper;","map":null,"metadata":{},"sourceType":"module"}