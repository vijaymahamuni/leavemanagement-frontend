{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport pick from 'lodash/pick';\nimport MonthDropdown from './MonthDropdown';\nimport TimeDropdown from './TimeDropdown';\nimport CalendarBody from './CalendarBody';\nimport CalendarHeader from './CalendarHeader';\nimport { useClassNames } from '../utils';\nimport { disabledTime, addMonths, shouldRenderDate, shouldRenderTime, shouldRenderMonth, isSameMonth, calendarOnlyProps, omitHideDisabledProps } from '../utils/dateUtils';\nimport { CalendarProvider } from './CalendarContext';\nimport useCalendarState, { CalendarState } from './useCalendarState';\nimport AngleUpIcon from '@rsuite/icons/legacy/AngleUp';\nvar CalendarContainer = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    className = props.className,\n    _props$classPrefix = props.classPrefix,\n    classPrefix = _props$classPrefix === void 0 ? 'calendar' : _props$classPrefix,\n    dateRange = props.dateRange,\n    disabledBackward = props.disabledBackward,\n    defaultState = props.defaultState,\n    disabledDate = props.disabledDate,\n    disabledForward = props.disabledForward,\n    format = props.format,\n    hoverRangeValue = props.hoverRangeValue,\n    _props$isoWeek = props.isoWeek,\n    isoWeek = _props$isoWeek === void 0 ? false : _props$isoWeek,\n    limitEndYear = props.limitEndYear,\n    limitStartYear = props.limitStartYear,\n    locale = props.locale,\n    onChangeMonth = props.onChangeMonth,\n    onChangeTime = props.onChangeTime,\n    onMouseMove = props.onMouseMove,\n    onMoveBackward = props.onMoveBackward,\n    onMoveForward = props.onMoveForward,\n    onSelect = props.onSelect,\n    onToggleMeridian = props.onToggleMeridian,\n    onToggleMonthDropdown = props.onToggleMonthDropdown,\n    onToggleTimeDropdown = props.onToggleTimeDropdown,\n    calendarDate = props.calendarDate,\n    cellClassName = props.cellClassName,\n    renderCell = props.renderCell,\n    renderTitle = props.renderTitle,\n    renderToolbar = props.renderToolbar,\n    showMeridian = props.showMeridian,\n    showWeekNumbers = props.showWeekNumbers,\n    inline = props.inline,\n    rest = _objectWithoutPropertiesLoose(props, [\"as\", \"className\", \"classPrefix\", \"dateRange\", \"disabledBackward\", \"defaultState\", \"disabledDate\", \"disabledForward\", \"format\", \"hoverRangeValue\", \"isoWeek\", \"limitEndYear\", \"limitStartYear\", \"locale\", \"onChangeMonth\", \"onChangeTime\", \"onMouseMove\", \"onMoveBackward\", \"onMoveForward\", \"onSelect\", \"onToggleMeridian\", \"onToggleMonthDropdown\", \"onToggleTimeDropdown\", \"calendarDate\", \"cellClassName\", \"renderCell\", \"renderTitle\", \"renderToolbar\", \"showMeridian\", \"showWeekNumbers\", \"inline\"]);\n  var _useClassNames = useClassNames(classPrefix),\n    withClassPrefix = _useClassNames.withClassPrefix,\n    merge = _useClassNames.merge,\n    prefix = _useClassNames.prefix;\n  var _useCalendarState = useCalendarState(defaultState),\n    calendarState = _useCalendarState.calendarState,\n    reset = _useCalendarState.reset,\n    openMonth = _useCalendarState.openMonth,\n    openTime = _useCalendarState.openTime;\n  var isDisabledDate = useCallback(function (date) {\n    var _disabledDate;\n    return (_disabledDate = disabledDate === null || disabledDate === void 0 ? void 0 : disabledDate(date)) !== null && _disabledDate !== void 0 ? _disabledDate : false;\n  }, [disabledDate]);\n  var isTimeDisabled = function isTimeDisabled(date) {\n    return disabledTime(props, date);\n  };\n  var handleMoveForward = useCallback(function () {\n    onMoveForward === null || onMoveForward === void 0 ? void 0 : onMoveForward(addMonths(calendarDate, 1));\n  }, [onMoveForward, calendarDate]);\n  var handleMoveBackward = useCallback(function () {\n    onMoveBackward === null || onMoveBackward === void 0 ? void 0 : onMoveBackward(addMonths(calendarDate, -1));\n  }, [onMoveBackward, calendarDate]); // It is displayed as the month to be selected.\n\n  var toggleMonthView = useCallback(function () {\n    if (calendarState === CalendarState.MONTH) {\n      reset();\n    } else {\n      openMonth();\n    }\n    onToggleMonthDropdown === null || onToggleMonthDropdown === void 0 ? void 0 : onToggleMonthDropdown(calendarState !== CalendarState.MONTH);\n  }, [calendarState, onToggleMonthDropdown, openMonth, reset]); // It is displayed as a time to be selected.\n\n  var toggleTimeView = useCallback(function () {\n    if (calendarState === CalendarState.TIME) {\n      reset();\n    } else {\n      openTime();\n    }\n    onToggleTimeDropdown === null || onToggleTimeDropdown === void 0 ? void 0 : onToggleTimeDropdown(calendarState !== CalendarState.TIME);\n  }, [calendarState, onToggleTimeDropdown, openTime, reset]);\n  var handleCloseDropdown = useCallback(function () {\n    return reset();\n  }, [reset]);\n  var renderDate = shouldRenderDate(format);\n  var renderTime = shouldRenderTime(format);\n  var renderMonth = shouldRenderMonth(format);\n  var onlyShowTime = renderTime && !renderDate && !renderMonth;\n  var onlyShowMonth = renderMonth && !renderDate && !renderTime;\n  var showTime = calendarState === CalendarState.TIME || onlyShowTime;\n  var showMonth = calendarState === CalendarState.MONTH || onlyShowMonth;\n  var inSameThisMonthDate = useCallback(function (date) {\n    return isSameMonth(calendarDate, date);\n  }, [calendarDate]);\n  var calendarClasses = merge(className, withClassPrefix({\n    'time-view': showTime,\n    'month-view': showMonth,\n    'show-week-numbers': showWeekNumbers\n  }));\n  var timeDropdownProps = pick(rest, calendarOnlyProps);\n  var handleChangeMonth = useCallback(function (date, event) {\n    reset();\n    onChangeMonth === null || onChangeMonth === void 0 ? void 0 : onChangeMonth(date, event);\n  }, [onChangeMonth, reset]);\n  var contextValue = useMemo(function () {\n    return {\n      date: calendarDate,\n      dateRange: dateRange,\n      disabledDate: isDisabledDate,\n      format: format,\n      hoverRangeValue: hoverRangeValue,\n      inSameMonth: inSameThisMonthDate,\n      isoWeek: isoWeek,\n      locale: locale,\n      onChangeMonth: handleChangeMonth,\n      onChangeTime: onChangeTime,\n      onMouseMove: onMouseMove,\n      onSelect: onSelect,\n      cellClassName: cellClassName,\n      renderCell: renderCell,\n      showWeekNumbers: showWeekNumbers,\n      inline: inline\n    };\n  }, [calendarDate, dateRange, format, handleChangeMonth, hoverRangeValue, inSameThisMonthDate, inline, isDisabledDate, isoWeek, locale, onChangeTime, onMouseMove, onSelect, cellClassName, renderCell, showWeekNumbers]);\n  return /*#__PURE__*/React.createElement(CalendarProvider, {\n    value: contextValue\n  }, /*#__PURE__*/React.createElement(Component, _extends({}, omitHideDisabledProps(rest), {\n    className: calendarClasses,\n    ref: ref\n  }), /*#__PURE__*/React.createElement(CalendarHeader, {\n    showMonth: renderMonth,\n    showDate: renderDate,\n    showTime: renderTime,\n    showMeridian: showMeridian,\n    disabledTime: isTimeDisabled,\n    onMoveForward: handleMoveForward,\n    onMoveBackward: handleMoveBackward,\n    onToggleMonthDropdown: toggleMonthView,\n    onToggleTimeDropdown: toggleTimeView,\n    onToggleMeridian: onToggleMeridian,\n    renderTitle: renderTitle,\n    renderToolbar: renderToolbar,\n    disabledBackward: disabledBackward,\n    disabledForward: disabledForward\n  }), renderDate && /*#__PURE__*/React.createElement(CalendarBody, null), renderMonth && /*#__PURE__*/React.createElement(MonthDropdown, {\n    show: showMonth,\n    limitEndYear: limitEndYear,\n    limitStartYear: limitStartYear,\n    disabledMonth: isDisabledDate\n  }), renderTime && /*#__PURE__*/React.createElement(TimeDropdown, _extends({}, timeDropdownProps, {\n    show: showTime,\n    showMeridian: showMeridian\n  })), (showMonth || showTime) && renderDate && /*#__PURE__*/React.createElement(\"button\", {\n    className: prefix('btn-close'),\n    onClick: handleCloseDropdown,\n    \"aria-label\": \"Collapse \" + (showMonth ? 'month' : 'time') + \" view\"\n  }, /*#__PURE__*/React.createElement(AngleUpIcon, null))));\n});\nCalendarContainer.displayName = 'CalendarContainer';\nCalendarContainer.propTypes = {\n  className: PropTypes.string,\n  classPrefix: PropTypes.string,\n  disabledDate: PropTypes.func,\n  disabledHours: PropTypes.func,\n  disabledMinutes: PropTypes.func,\n  disabledSeconds: PropTypes.func,\n  format: PropTypes.string,\n  hideHours: PropTypes.func,\n  hideMinutes: PropTypes.func,\n  hideSeconds: PropTypes.func,\n  isoWeek: PropTypes.bool,\n  limitEndYear: PropTypes.number,\n  limitStartYear: PropTypes.number,\n  locale: PropTypes.object,\n  onChangeMonth: PropTypes.func,\n  onChangeTime: PropTypes.func,\n  onMoveBackward: PropTypes.func,\n  onMoveForward: PropTypes.func,\n  onSelect: PropTypes.func,\n  onToggleMeridian: PropTypes.func,\n  onToggleMonthDropdown: PropTypes.func,\n  onToggleTimeDropdown: PropTypes.func,\n  calendarDate: PropTypes.instanceOf(Date),\n  renderCell: PropTypes.func,\n  renderTitle: PropTypes.func,\n  renderToolbar: PropTypes.func,\n  showMeridian: PropTypes.bool,\n  showWeekNumbers: PropTypes.bool\n};\nexport default CalendarContainer;","map":null,"metadata":{},"sourceType":"module"}