{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Project\\\\Front_end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Project\\\\Front_end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"C:\\\\Project\\\\Front_end\\\\src\\\\new_chat\\\\new_chatingroom.js\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\n// import React from \"react\";\n// import \"./newChat.css\";\n// import userImg from \"./Vijay_YNM.jpg\";\n// import VinuImg from \"./Vinu.jpg\";\n// import Tlogo from \"./Vijay_logo.jpg\";\n// import Jaya from \"./jayaprakash.jpeg\";\n// import SearchIcon from '@mui/icons-material/Search';\n// import SendIcon from '@mui/icons-material/Send';\n// import classNames from \"classnames\"; \n// import ArrowBackIcon from '@mui/icons-material/ArrowBack';\n// import { useEffect, useState } from 'react';\n// import firebase from 'firebase/compat/app';\n// import Button from 'react-bootstrap/Button';\n// import axios from \"axios\";\n// import AddIcon from '@mui/icons-material/Add';\n// import 'firebase/compat/firestore';\n// import { Scrollbars } from 'react-custom-scrollbars';\n// import { Link, Outlet, useNavigate, useParams,useLocation } from \"react-router-dom\";\n// import { v4 as uuidv4 } from 'uuid';\n// import defaultchatRoomimg from \"./default_chtappimg2.png\";\n// import Tigmalog from \"./TigmaVj.jpg\";\n// import DotButton from \"./DotButton \";\n// import { db, auth, storage } from \"../firebase\";\n// import {\n//   collection,\n//   query,\n//   where,\n//   onSnapshot,\n//   addDoc,\n//   Timestamp,\n//   orderBy,\n//   setDoc,\n//   doc,\n//   getDoc,\n//   updateDoc,\n// } from \"firebase/firestore\";\n\n// function ChatingApp(){\n//   let Profileid=sessionStorage.getItem(\"proid\",Profileid)\n//   const generatedID = uuidv4();\n//   var ChatViewid=Profileid;\n//   // let tosend_userid='10';\n\n//   var Docu_ChatViewid;\n\n//   const[message,setmessage]=useState([])\n//   const [text, setText] = useState('');\n//   const [chatBlocklist,setChatblocklist]=useState([])\n//   const timestamp = firebase.firestore.Timestamp.now();\n//   const [chatblock, setChatblock] = useState([]);\n//   const [ticketChatList, setTicketChatList] = useState([]);\n//   const [sendTo_userid, setsendTo_userid] = useState('');\n//   const [default_loading, setdefault_loading] = useState(false);\n//   const [now_activeuser,setNow_activeuser]=useState([]);\n\n//   useEffect(() => {\n//     // setsendTo_userid(tosend_userid)\n//     let activeStatus='Active';\n//     let currentlyActive_user=sessionStorage.getItem('proid')\n//     axios.get(`http://localhost:5000/Chating_employeelist`)\n//       .then((res) => {\n//         const ticketChatList = res.data.data;\n//         console.log(\"Active status user:\", ticketChatList);\n\n//         setTicketChatList(ticketChatList);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching data:\", error);\n//       });\n//       // axios.put(`http://localhost:5000/chatActive_update/${Profileid}/${activeStatus}` )\n//     }, []); \n\n//   useEffect(() => {\n//   if (ticketChatList.length > 0) {\n//       setChatblock(ticketChatList);\n//     }\n//   }, [ticketChatList]);\n\n//   const [existingConversations, setExistingConversations] = useState([]);\n//   const [newUserChatID, setNewUserChatID] = useState(null);\n//   const [isActive, setIsActive] = useState(false);\n//   const [users, setUsers] = useState([]);\n//   const user1 = auth.currentUser.uid;\n\n//   useEffect(() => {\n//     const usersRef = collection(db, \"users\");\n//     // create query object\n//     const q = query(usersRef);\n//     // execute query\n//     const unsub = onSnapshot(q, (querySnapshot) => {\n//       let users = [];\n//       querySnapshot.forEach((doc) => {\n//         users.push(doc.data());\n//       });\n//       setUsers(users);\n//     });\n//     return () => unsub();\n//   }, []);\n//   console.log(users)\n//   const sendMessage = () => {\n//     const db = firebase.firestore();\n//     const collectionName = 'chats';\n//     const subcollectionName = 'SubChat';\n//     const data = {\n//       text,\n//       createdAt: timestamp,\n//       from_uid: Profileid,\n//       to_uid: sendmsgId,\n//     };\n\n//     if (text.trim() !== '') {\n//       // Use newUserChatID after it's set in the condition\n//       const mainDocRef = db.collection(collectionName).doc(newUserChatID);\n\n//       mainDocRef\n//         .set(data)\n//         .then(() => {\n//           // Once the main document is successfully updated, add the message to the subcollection\n//           mainDocRef\n//             .collection(subcollectionName)\n//             .add(data)\n//             .then(() => {\n//               // Message sent successfully\n//             })\n//             .catch((error) => {\n//               // Handle error\n//             });\n//         })\n//         .catch((error) => {\n//           console.error('Error writing main document: ', error);\n//         });\n\n//       setText('');\n\n//       // To immediately update the message state, you can manually add the sent message to the message state.\n//       setmessage((prevMessages) => [...prevMessages, data]);\n//     }\n//   };\n\n// const chatListItems = searchInput\n//   ? searchResults.map((item, index) => (\n//     <div className=\"chatItem\" key={index}>\n//     <div className=\"imgbx\">\n//       <img src={\"http://localhost:5000/images/\"+ item.id}  className=\"cover\"  />\n//     </div>\n//     <div className=\"chatInfo\">\n//       <p className=\"chatName\" onClick={()=>chatblock_process(item.id,item.firstname)}>{item.firstname}</p>\n//     </div>\n//   </div>\n\n//     )): chatblock.map((item, index) => (\n//     <div className=\"chatItem\" key={index}>\n//     <div className=\"imgbx\">\n//       <img src={\"http://localhost:5000/images/\"+ item.id}  className=\"cover\"  />\n//     </div>\n//     <div className=\"chatInfo\">\n//       <p className=\"chatName\" onClick={()=>chatblock_process(item.id,item.firstname)}>{item.firstname}</p>\n//       </div>\n//   </div>\n//     ));\n// const handleKeyPress = (event) => {\n//     if (event.key === 'Enter') {\n//       sendMessage();\n//     }\n//   };\n// const [selectedChatMessages, setSelectedChatMessages] = useState([]);\n\n// useEffect(() => {\n//   const unsubscribe =firebase.firestore().collection('chats')\n//   .orderBy('createdAt')\n//   .get()\n//   .then((querySnapshot) => {\n//     const allChats = [];\n//     querySnapshot.forEach((doc) => {\n//       allChats.push({\n//         id: doc.id,\n//         ...doc.data(),\n//       });\n//     });\n//     setmessage(allChats);\n//     setExistingConversations(allChats)\n\n//   })\n//   .catch((error) => {\n//     console.error('Error getting documents: ', error);\n//   });\n\n//   }, []);\n\n// let Profilename=sessionStorage.getItem(\"profileName\",Profilename);\n\n// const [ticketid, setTicketid] = useState(ChatViewid);\n// const [chatuser_name,setChatuser_name] = useState(Profilename);\n// const [sendmsgId,setSendmsgId ] = useState('');\n// const [chat_active,setChatactive]=useState()\n// const chatblock_process = (id, firstname,chatActive) => {\n//   // Update state variables directly\n//   setdefault_loading(true)\n//   setChatuser_name(firstname);\n//   setActiveUser(id);\n//   setChatactive(chatActive)\n//   const convtStrId = id.toString();\n//   setSendmsgId(convtStrId);\n\n//   const existingChat = existingConversations.find(\n//     (chat) =>\n//       (chat.from_uid === Profileid && chat.to_uid === convtStrId) ||\n//       (chat.from_uid === convtStrId && chat.to_uid === Profileid)\n//   );\n\n//   // Initialize newUserChatID with the existing chat ID or a new one\n//   const newUserChatID = existingChat ? existingChat.id : uuidv4();\n//   setNewUserChatID(newUserChatID);\n\n//   setsendTo_userid(convtStrId);\n\n//   const duplicate_docid = id.toString();\n//   setTicketid(duplicate_docid);\n\n//   // Fetch and display messages for the selected chat\n//   fetchMessagesForChat(newUserChatID);\n// };\n\n// const fetchMessagesForChat = (chatID) => {\n//   const unsubscribe = firebase.firestore().collection('chats').doc(chatID).collection('SubChat')\n//   .orderBy('createdAt')\n//   .onSnapshot(snapshot => {\n//     const messages = snapshot.docs.map(doc => ({\n//       id: doc.id,\n//       ...doc.data(),\n//     }));\n//     setmessage(messages);\n//   });\n\n// return () => unsubscribe();\n// };\n\n// let prevDate = null;  \n// const [searchInput, setSearchInput] = useState('');\n// const [searchResults, setSearchResults] = useState([]);\n// const handleSearch = (query) => {\n//   setSearchInput(query);\n\n//   // Perform search logic (e.g., filter chatblock based on the query)\n//   const results = chatblock.filter((item) =>\n//     item.firstname.toLowerCase().includes(query.toLowerCase())\n//   );\n//   setSearchResults(results);\n// };\n\n// const [activeUser, setActiveUser] = useState(null);\n\n// function formatDate(formattedDate) {\n\n// }\n//   return(\n//     <div className=\"chatroom-container\">\n//           <div className=\"left-side\">\n//           <div className=\"header\">\n\n//           <div className=\"backButton\">\n//           <ArrowBackIcon className=\"backicon\" />\n//           <div className=\"chat_heading\">\n//             <p>Chat</p>\n//             </div>\n//         </div>\n\n//           </div>\n\n//           <div className=\"search-chat\">\n//             <div>\n//               <input\n//       type=\"text\"\n//       placeholder=\"Search or start new chat\"\n//       value={searchInput}\n//       onChange={(e) => handleSearch(e.target.value)}\n//     />\n//               <SearchIcon className=\"Search_icon\"/>\n//             </div>\n//           </div>\n\n//           <div className=\"chatList\">\n//           {ticketChatList\n//             .filter(item =>\n//               item.firstname.toLowerCase().includes(searchInput.toLowerCase())\n//             )\n//             .map((item, index) => (\n//                    <div\n//       className={classNames(\"chatItem\", { active: item.id === activeUser })}\n//       key={index}\n//       onClick={() => chatblock_process(item.id, item.firstname,item.chatActive)}\n//     >\n//                 <div className=\"imgbx\">\n//                   <img src={`http://localhost:5000/images/${item.id}`} className=\"cover\" alt={`Profile of ${item.firstname}`} />\n//                 </div>\n//                 <div className=\"chatInfo\">\n//                   <p className=\"chatName\" >{item.firstname}</p>\n//                   {/* <p className=\"lastMsg_side\" >Hi</p>s */}\n\n//                   {/* <DotButton active={isActive} /> */}\n\n//                 </div>\n//                 <div key={index} className=\"activeDot\">\n//           {item.chatActive === 'Active' ? (<DotButton active={isActive} />):(<></>)}\n//         </div>\n\n//               </div>\n//             ))}\n\n//         </div>\n\n//           </div>\n//          {default_loading ?(<>\n\n//           <div className=\"right-side\">\n//           <div className=\"chatHeader\">\n//           <div className=\"userImage\">\n//             <img src={\"http://localhost:5000/images/\"+ ticketid}  className=\"cover\" alt=\"Chat User\" />\n//           </div>\n//           <div className=\"userInfo\">\n//             <p className=\"chatName\">{chatuser_name}</p>\n//             <p className=\"status\">{chat_active}</p>\n//           </div>\n//         </div>\n\n//         <div className=\"chatMessages\">\n//   {message.map((message, index) => {\n//     const messageDate = message.createdAt.toDate();\n//     const formattedDate = messageDate.toLocaleDateString('en-US', {\n//       year: 'numeric',\n//       day: '2-digit',\n//       month: '2-digit',\n\n//     });\n\n//     const date1 = new Date(formattedDate);\n//     const today = new Date();\n//     const formatDate = (date) => {\n//       const month = (date.getMonth() + 1).toString().padStart(2, '0');\n//       const day = date.getDate().toString().padStart(2, '0');\n//       const year = date.getFullYear();\n//       return `${month}/${day}/${year}`;\n//     };\n//     const getDayName = (date) => {\n//       const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n//       return dayNames[date.getDay()];\n//     };\n//     // const formattedDate1 = formatDate(date1);\n//     // const formattedDate2 = formatDate(today);\n//     let comparisonResult;\n\n//     const oneWeekAgo = new Date();\n//     oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n//     if (date1 >= oneWeekAgo) {\n//       const today = new Date();\n//       today.setHours(0, 0, 0, 0);\n\n//       if (date1.toDateString() === today.toDateString()) {\n//         comparisonResult = 'Today';\n//       } else {\n//         const dayName = getDayName(date1);\n//         const formattedDate = formatDate(date1);\n//         comparisonResult = `${dayName}`;\n//       }\n//     } else {\n//       comparisonResult = `${formattedDate}`;\n//     }\n\n//     console.log(\"Changed date format for demo printed\", comparisonResult);\n\n//     const formattedTime = messageDate.toLocaleTimeString('en-US', {\n//       hour: 'numeric',\n//       minute: 'numeric',\n//     });\n//     const lowercaseTime = formattedTime.replace(/\\s/g, '').toLowerCase();\n//     const showDate = prevDate !== formattedDate;\n//     prevDate = formattedDate;\n\n//     const isSentByCurrentUser = message.from_uid === Profileid && message.to_uid === sendTo_userid;\n//     const isReceivedByCurrentUser = message.from_uid === sendTo_userid && message.to_uid === Profileid;\n\n//                                                  //  8===8 && 10===10\n//     if (isSentByCurrentUser || isReceivedByCurrentUser) {\n//       return (\n//         <React.Fragment key={index}>\n//           {showDate && <p className=\"messageDate_show\">{comparisonResult}</p>}\n//           <div\n//             key={index}\n//             className={`message ${isSentByCurrentUser ? 'sent' : 'received'}`}\n//           >\n//  <p className=\"chat_msgstl\">\n//       {message.text}\n//       <span className=\"chating_time\">{lowercaseTime}</span>\n//     </p>\n//           </div>\n//         </React.Fragment>\n//       );\n//     }\n//   })}\n// </div>\n\n// <div className=\"messageInput\">\n//           <input type=\"text\"  value={text} onKeyDown={handleKeyPress} onChange={e => setText(e.target.value)} placeholder=\"Type a message...\" />\n//           <SendIcon className=\"sendIcon\"  onClick={sendMessage} />\n// </div>\n\n// </div> \n\n//          </>):(<>\n\n//           <div className=\"chatRoom_loadingimg\">\n//   <div>\n//   <img src={defaultchatRoomimg} className=\"imgdeafult-chat\"/>\n//  </div>\n//  {/* <div>\n//   <img src={Tigmalog} className=\"imgdeafult-logo\"/>\n//  </div> */}\n//   <div class=\"company-info\">\n//     <h2>Welcome to Tigma Technology Chat</h2>\n// </div>\n// </div>\n\n//          </>)}\n\n// </div>\n//   )\n// }\n// export default ChatingApp;\nimport React, { useEffect, useState } from \"react\";\nimport { db, auth, storage } from \"../firebase\";\nimport { collection, query, where, onSnapshot, addDoc, Timestamp, orderBy, setDoc, doc, getDoc, updateDoc } from \"firebase/firestore\";\nimport { ref, getDownloadURL, uploadBytes } from \"firebase/storage\";\n// import User from \"../components/User\";\n// import MessageForm from \"../components/MessageForm\";\n// import Message from \"../components/Message\";\n\nvar ChatingApp = function ChatingApp() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    users = _useState2[0],\n    setUsers = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    chat = _useState4[0],\n    setChat = _useState4[1];\n  var _useState5 = useState(\"\"),\n    _useState6 = _slicedToArray(_useState5, 2),\n    text = _useState6[0],\n    setText = _useState6[1];\n  var _useState7 = useState(\"\"),\n    _useState8 = _slicedToArray(_useState7, 2),\n    img = _useState8[0],\n    setImg = _useState8[1];\n  var _useState9 = useState([]),\n    _useState10 = _slicedToArray(_useState9, 2),\n    msgs = _useState10[0],\n    setMsgs = _useState10[1];\n  var user1 = auth.currentUser.uid;\n  useEffect(function () {\n    var usersRef = collection(db, \"users\");\n    // create query object\n    var q = query(usersRef, where(\"uid\", \"not-in\", [user1]));\n    // execute query\n    var unsub = onSnapshot(q, function (querySnapshot) {\n      var users = [];\n      querySnapshot.forEach(function (doc) {\n        users.push(doc.data());\n      });\n      setUsers(users);\n    });\n    return function () {\n      return unsub();\n    };\n  }, []);\n  var selectUser = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(user) {\n      var user2, id, msgsRef, q, docSnap;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            setChat(user);\n            user2 = user.uid;\n            id = user1 > user2 ? \"\".concat(user1 + user2) : \"\".concat(user2 + user1);\n            msgsRef = collection(db, \"messages\", id, \"chat\");\n            q = query(msgsRef, orderBy(\"createdAt\", \"asc\"));\n            onSnapshot(q, function (querySnapshot) {\n              var msgs = [];\n              querySnapshot.forEach(function (doc) {\n                msgs.push(doc.data());\n              });\n              setMsgs(msgs);\n            });\n\n            // get last message b/w logged in user and selected user\n            _context.next = 8;\n            return getDoc(doc(db, \"lastMsg\", id));\n          case 8:\n            docSnap = _context.sent;\n            if (!(docSnap.data() && docSnap.data().from !== user1)) {\n              _context.next = 12;\n              break;\n            }\n            _context.next = 12;\n            return updateDoc(doc(db, \"lastMsg\", id), {\n              unread: false\n            });\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function selectUser(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(e) {\n      var user2, id, url, imgRef, snap, dlUrl;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            e.preventDefault();\n            user2 = chat.uid;\n            id = user1 > user2 ? \"\".concat(user1 + user2) : \"\".concat(user2 + user1);\n            if (!img) {\n              _context2.next = 12;\n              break;\n            }\n            imgRef = ref(storage, \"images/\".concat(new Date().getTime(), \" - \").concat(img.name));\n            _context2.next = 7;\n            return uploadBytes(imgRef, img);\n          case 7:\n            snap = _context2.sent;\n            _context2.next = 10;\n            return getDownloadURL(ref(storage, snap.ref.fullPath));\n          case 10:\n            dlUrl = _context2.sent;\n            url = dlUrl;\n          case 12:\n            _context2.next = 14;\n            return addDoc(collection(db, \"messages\", id, \"chat\"), {\n              text: text,\n              from: user1,\n              to: user2,\n              createdAt: Timestamp.fromDate(new Date()),\n              media: url || \"\"\n            });\n          case 14:\n            _context2.next = 16;\n            return setDoc(doc(db, \"lastMsg\", id), {\n              text: text,\n              from: user1,\n              to: user2,\n              createdAt: Timestamp.fromDate(new Date()),\n              media: url || \"\",\n              unread: true\n            });\n          case 16:\n            setText(\"\");\n            setImg(\"\");\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return function handleSubmit(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"home_container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 563,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"users_container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 7\n    }\n  }, users.map(function (user) {\n    return /*#__PURE__*/React.createElement(User, {\n      key: user.uid,\n      user: user,\n      selectUser: selectUser,\n      user1: user1,\n      chat: chat,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 11\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"messages_container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 7\n    }\n  }, chat ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"messages_user\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 578,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 579,\n      columnNumber: 15\n    }\n  }, chat.name)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"messages\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 581,\n      columnNumber: 13\n    }\n  }, msgs.length ? msgs.map(function (msg, i) {\n    return /*#__PURE__*/React.createElement(Message, {\n      key: i,\n      msg: msg,\n      user1: user1,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 21\n      }\n    });\n  }) : null), /*#__PURE__*/React.createElement(MessageForm, {\n    handleSubmit: handleSubmit,\n    text: text,\n    setText: setText,\n    setImg: setImg,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 13\n    }\n  })) : /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"no_conv\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 596,\n      columnNumber: 11\n    }\n  }, \"Select a user to start conversation\")));\n};\nexport default ChatingApp;","map":{"version":3,"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","_catch","delegateYield","React","useEffect","useState","db","auth","storage","collection","query","where","onSnapshot","addDoc","Timestamp","orderBy","setDoc","doc","getDoc","updateDoc","ref","getDownloadURL","uploadBytes","ChatingApp","_useState","_useState2","_slicedToArray","users","setUsers","_useState3","_useState4","chat","setChat","_useState5","_useState6","text","setText","_useState7","_useState8","img","setImg","_useState9","_useState10","msgs","setMsgs","user1","currentUser","uid","usersRef","q","unsub","querySnapshot","data","selectUser","_ref","_asyncToGenerator","_callee","user","user2","id","msgsRef","docSnap","_callee$","_context","concat","from","unread","_x","apply","arguments","handleSubmit","_ref2","_callee2","url","imgRef","snap","dlUrl","_callee2$","_context2","preventDefault","Date","getTime","fullPath","to","createdAt","fromDate","media","_x2","createElement","className","__self","_this","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","User","key","Fragment","msg","Message","MessageForm"],"sources":["C:/Project/Front_end/src/new_chat/new_chatingroom.js"],"sourcesContent":["// import React from \"react\";\r\n// import \"./newChat.css\";\r\n// import userImg from \"./Vijay_YNM.jpg\";\r\n// import VinuImg from \"./Vinu.jpg\";\r\n// import Tlogo from \"./Vijay_logo.jpg\";\r\n// import Jaya from \"./jayaprakash.jpeg\";\r\n// import SearchIcon from '@mui/icons-material/Search';\r\n// import SendIcon from '@mui/icons-material/Send';\r\n// import classNames from \"classnames\"; \r\n// import ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\n// import { useEffect, useState } from 'react';\r\n// import firebase from 'firebase/compat/app';\r\n// import Button from 'react-bootstrap/Button';\r\n// import axios from \"axios\";\r\n// import AddIcon from '@mui/icons-material/Add';\r\n// import 'firebase/compat/firestore';\r\n// import { Scrollbars } from 'react-custom-scrollbars';\r\n// import { Link, Outlet, useNavigate, useParams,useLocation } from \"react-router-dom\";\r\n// import { v4 as uuidv4 } from 'uuid';\r\n// import defaultchatRoomimg from \"./default_chtappimg2.png\";\r\n// import Tigmalog from \"./TigmaVj.jpg\";\r\n// import DotButton from \"./DotButton \";\r\n// import { db, auth, storage } from \"../firebase\";\r\n// import {\r\n//   collection,\r\n//   query,\r\n//   where,\r\n//   onSnapshot,\r\n//   addDoc,\r\n//   Timestamp,\r\n//   orderBy,\r\n//   setDoc,\r\n//   doc,\r\n//   getDoc,\r\n//   updateDoc,\r\n// } from \"firebase/firestore\";\r\n\r\n// function ChatingApp(){\r\n//   let Profileid=sessionStorage.getItem(\"proid\",Profileid)\r\n//   const generatedID = uuidv4();\r\n//   var ChatViewid=Profileid;\r\n//   // let tosend_userid='10';\r\n  \r\n//   var Docu_ChatViewid;\r\n\r\n//   const[message,setmessage]=useState([])\r\n//   const [text, setText] = useState('');\r\n//   const [chatBlocklist,setChatblocklist]=useState([])\r\n//   const timestamp = firebase.firestore.Timestamp.now();\r\n//   const [chatblock, setChatblock] = useState([]);\r\n//   const [ticketChatList, setTicketChatList] = useState([]);\r\n//   const [sendTo_userid, setsendTo_userid] = useState('');\r\n//   const [default_loading, setdefault_loading] = useState(false);\r\n//   const [now_activeuser,setNow_activeuser]=useState([]);\r\n\r\n//   useEffect(() => {\r\n//     // setsendTo_userid(tosend_userid)\r\n//     let activeStatus='Active';\r\n//     let currentlyActive_user=sessionStorage.getItem('proid')\r\n//     axios.get(`http://localhost:5000/Chating_employeelist`)\r\n//       .then((res) => {\r\n//         const ticketChatList = res.data.data;\r\n//         console.log(\"Active status user:\", ticketChatList);\r\n\r\n\r\n//         setTicketChatList(ticketChatList);\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error fetching data:\", error);\r\n//       });\r\n//       // axios.put(`http://localhost:5000/chatActive_update/${Profileid}/${activeStatus}` )\r\n//     }, []); \r\n  \r\n//   useEffect(() => {\r\n//   if (ticketChatList.length > 0) {\r\n//       setChatblock(ticketChatList);\r\n//     }\r\n//   }, [ticketChatList]);\r\n\r\n//   const [existingConversations, setExistingConversations] = useState([]);\r\n//   const [newUserChatID, setNewUserChatID] = useState(null);\r\n//   const [isActive, setIsActive] = useState(false);\r\n//   const [users, setUsers] = useState([]);\r\n//   const user1 = auth.currentUser.uid;\r\n\r\n//   useEffect(() => {\r\n//     const usersRef = collection(db, \"users\");\r\n//     // create query object\r\n//     const q = query(usersRef);\r\n//     // execute query\r\n//     const unsub = onSnapshot(q, (querySnapshot) => {\r\n//       let users = [];\r\n//       querySnapshot.forEach((doc) => {\r\n//         users.push(doc.data());\r\n//       });\r\n//       setUsers(users);\r\n//     });\r\n//     return () => unsub();\r\n//   }, []);\r\n//   console.log(users)\r\n//   const sendMessage = () => {\r\n//     const db = firebase.firestore();\r\n//     const collectionName = 'chats';\r\n//     const subcollectionName = 'SubChat';\r\n//     const data = {\r\n//       text,\r\n//       createdAt: timestamp,\r\n//       from_uid: Profileid,\r\n//       to_uid: sendmsgId,\r\n//     };\r\n  \r\n//     if (text.trim() !== '') {\r\n//       // Use newUserChatID after it's set in the condition\r\n//       const mainDocRef = db.collection(collectionName).doc(newUserChatID);\r\n  \r\n//       mainDocRef\r\n//         .set(data)\r\n//         .then(() => {\r\n//           // Once the main document is successfully updated, add the message to the subcollection\r\n//           mainDocRef\r\n//             .collection(subcollectionName)\r\n//             .add(data)\r\n//             .then(() => {\r\n//               // Message sent successfully\r\n//             })\r\n//             .catch((error) => {\r\n//               // Handle error\r\n//             });\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error('Error writing main document: ', error);\r\n//         });\r\n  \r\n//       setText('');\r\n  \r\n//       // To immediately update the message state, you can manually add the sent message to the message state.\r\n//       setmessage((prevMessages) => [...prevMessages, data]);\r\n//     }\r\n//   };\r\n  \r\n\r\n\r\n// const chatListItems = searchInput\r\n//   ? searchResults.map((item, index) => (\r\n//     <div className=\"chatItem\" key={index}>\r\n//     <div className=\"imgbx\">\r\n//       <img src={\"http://localhost:5000/images/\"+ item.id}  className=\"cover\"  />\r\n//     </div>\r\n//     <div className=\"chatInfo\">\r\n//       <p className=\"chatName\" onClick={()=>chatblock_process(item.id,item.firstname)}>{item.firstname}</p>\r\n//     </div>\r\n//   </div>\r\n  \r\n//     )): chatblock.map((item, index) => (\r\n//     <div className=\"chatItem\" key={index}>\r\n//     <div className=\"imgbx\">\r\n//       <img src={\"http://localhost:5000/images/\"+ item.id}  className=\"cover\"  />\r\n//     </div>\r\n//     <div className=\"chatInfo\">\r\n//       <p className=\"chatName\" onClick={()=>chatblock_process(item.id,item.firstname)}>{item.firstname}</p>\r\n//       </div>\r\n//   </div>\r\n//     ));\r\n// const handleKeyPress = (event) => {\r\n//     if (event.key === 'Enter') {\r\n//       sendMessage();\r\n//     }\r\n//   };\r\n// const [selectedChatMessages, setSelectedChatMessages] = useState([]);\r\n\r\n// useEffect(() => {\r\n//   const unsubscribe =firebase.firestore().collection('chats')\r\n//   .orderBy('createdAt')\r\n//   .get()\r\n//   .then((querySnapshot) => {\r\n//     const allChats = [];\r\n//     querySnapshot.forEach((doc) => {\r\n//       allChats.push({\r\n//         id: doc.id,\r\n//         ...doc.data(),\r\n//       });\r\n//     });\r\n//     setmessage(allChats);\r\n//     setExistingConversations(allChats)\r\n    \r\n//   })\r\n//   .catch((error) => {\r\n//     console.error('Error getting documents: ', error);\r\n//   });\r\n  \r\n//   }, []);\r\n\r\n\r\n// let Profilename=sessionStorage.getItem(\"profileName\",Profilename);\r\n\r\n// const [ticketid, setTicketid] = useState(ChatViewid);\r\n// const [chatuser_name,setChatuser_name] = useState(Profilename);\r\n// const [sendmsgId,setSendmsgId ] = useState('');\r\n// const [chat_active,setChatactive]=useState()\r\n// const chatblock_process = (id, firstname,chatActive) => {\r\n//   // Update state variables directly\r\n//   setdefault_loading(true)\r\n//   setChatuser_name(firstname);\r\n//   setActiveUser(id);\r\n//   setChatactive(chatActive)\r\n//   const convtStrId = id.toString();\r\n//   setSendmsgId(convtStrId);\r\n\r\n//   const existingChat = existingConversations.find(\r\n//     (chat) =>\r\n//       (chat.from_uid === Profileid && chat.to_uid === convtStrId) ||\r\n//       (chat.from_uid === convtStrId && chat.to_uid === Profileid)\r\n//   );\r\n\r\n//   // Initialize newUserChatID with the existing chat ID or a new one\r\n//   const newUserChatID = existingChat ? existingChat.id : uuidv4();\r\n//   setNewUserChatID(newUserChatID);\r\n\r\n//   setsendTo_userid(convtStrId);\r\n\r\n//   const duplicate_docid = id.toString();\r\n//   setTicketid(duplicate_docid);\r\n\r\n//   // Fetch and display messages for the selected chat\r\n//   fetchMessagesForChat(newUserChatID);\r\n// };\r\n\r\n// const fetchMessagesForChat = (chatID) => {\r\n//   const unsubscribe = firebase.firestore().collection('chats').doc(chatID).collection('SubChat')\r\n//   .orderBy('createdAt')\r\n//   .onSnapshot(snapshot => {\r\n//     const messages = snapshot.docs.map(doc => ({\r\n//       id: doc.id,\r\n//       ...doc.data(),\r\n//     }));\r\n//     setmessage(messages);\r\n//   });\r\n\r\n// return () => unsubscribe();\r\n// };\r\n\r\n// let prevDate = null;  \r\n// const [searchInput, setSearchInput] = useState('');\r\n// const [searchResults, setSearchResults] = useState([]);\r\n// const handleSearch = (query) => {\r\n//   setSearchInput(query);\r\n\r\n//   // Perform search logic (e.g., filter chatblock based on the query)\r\n//   const results = chatblock.filter((item) =>\r\n//     item.firstname.toLowerCase().includes(query.toLowerCase())\r\n//   );\r\n//   setSearchResults(results);\r\n// };\r\n\r\n// const [activeUser, setActiveUser] = useState(null);\r\n\r\n// function formatDate(formattedDate) {\r\n\r\n\r\n\r\n// }\r\n//   return(\r\n//     <div className=\"chatroom-container\">\r\n//           <div className=\"left-side\">\r\n//           <div className=\"header\">\r\n         \r\n//           <div className=\"backButton\">\r\n//           <ArrowBackIcon className=\"backicon\" />\r\n//           <div className=\"chat_heading\">\r\n//             <p>Chat</p>\r\n//             </div>\r\n//         </div>\r\n           \r\n\r\n//           </div>\r\n\r\n      \r\n//           <div className=\"search-chat\">\r\n//             <div>\r\n//               <input\r\n//       type=\"text\"\r\n//       placeholder=\"Search or start new chat\"\r\n//       value={searchInput}\r\n//       onChange={(e) => handleSearch(e.target.value)}\r\n//     />\r\n//               <SearchIcon className=\"Search_icon\"/>\r\n//             </div>\r\n//           </div>\r\n\r\n          \r\n\r\n//           <div className=\"chatList\">\r\n//           {ticketChatList\r\n//             .filter(item =>\r\n//               item.firstname.toLowerCase().includes(searchInput.toLowerCase())\r\n//             )\r\n//             .map((item, index) => (\r\n//                    <div\r\n//       className={classNames(\"chatItem\", { active: item.id === activeUser })}\r\n//       key={index}\r\n//       onClick={() => chatblock_process(item.id, item.firstname,item.chatActive)}\r\n//     >\r\n//                 <div className=\"imgbx\">\r\n//                   <img src={`http://localhost:5000/images/${item.id}`} className=\"cover\" alt={`Profile of ${item.firstname}`} />\r\n//                 </div>\r\n//                 <div className=\"chatInfo\">\r\n//                   <p className=\"chatName\" >{item.firstname}</p>\r\n//                   {/* <p className=\"lastMsg_side\" >Hi</p>s */}\r\n\r\n//                   {/* <DotButton active={isActive} /> */}\r\n\r\n//                 </div>\r\n//                 <div key={index} className=\"activeDot\">\r\n//           {item.chatActive === 'Active' ? (<DotButton active={isActive} />):(<></>)}\r\n//         </div>\r\n         \r\n                \r\n\r\n//               </div>\r\n//             ))}\r\n            \r\n//         </div>\r\n\r\n//           </div>\r\n//          {default_loading ?(<>\r\n\r\n//           <div className=\"right-side\">\r\n//           <div className=\"chatHeader\">\r\n//           <div className=\"userImage\">\r\n//             <img src={\"http://localhost:5000/images/\"+ ticketid}  className=\"cover\" alt=\"Chat User\" />\r\n//           </div>\r\n//           <div className=\"userInfo\">\r\n//             <p className=\"chatName\">{chatuser_name}</p>\r\n//             <p className=\"status\">{chat_active}</p>\r\n//           </div>\r\n//         </div>\r\n\r\n\r\n//         <div className=\"chatMessages\">\r\n//   {message.map((message, index) => {\r\n//     const messageDate = message.createdAt.toDate();\r\n//     const formattedDate = messageDate.toLocaleDateString('en-US', {\r\n//       year: 'numeric',\r\n//       day: '2-digit',\r\n//       month: '2-digit',\r\n \r\n//     });\r\n\r\n//     const date1 = new Date(formattedDate);\r\n//     const today = new Date();\r\n//     const formatDate = (date) => {\r\n//       const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n//       const day = date.getDate().toString().padStart(2, '0');\r\n//       const year = date.getFullYear();\r\n//       return `${month}/${day}/${year}`;\r\n//     };\r\n//     const getDayName = (date) => {\r\n//       const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n//       return dayNames[date.getDay()];\r\n//     };\r\n//     // const formattedDate1 = formatDate(date1);\r\n//     // const formattedDate2 = formatDate(today);\r\n//     let comparisonResult;\r\n\r\n//     const oneWeekAgo = new Date();\r\n//     oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\r\n//     if (date1 >= oneWeekAgo) {\r\n//       const today = new Date();\r\n//       today.setHours(0, 0, 0, 0);\r\n\r\n//       if (date1.toDateString() === today.toDateString()) {\r\n//         comparisonResult = 'Today';\r\n//       } else {\r\n//         const dayName = getDayName(date1);\r\n//         const formattedDate = formatDate(date1);\r\n//         comparisonResult = `${dayName}`;\r\n//       }\r\n//     } else {\r\n//       comparisonResult = `${formattedDate}`;\r\n//     }\r\n\r\n  \r\n//     console.log(\"Changed date format for demo printed\", comparisonResult);\r\n\r\n    \r\n    \r\n    \r\n//     const formattedTime = messageDate.toLocaleTimeString('en-US', {\r\n//       hour: 'numeric',\r\n//       minute: 'numeric',\r\n//     });\r\n//     const lowercaseTime = formattedTime.replace(/\\s/g, '').toLowerCase();\r\n//     const showDate = prevDate !== formattedDate;\r\n//     prevDate = formattedDate;\r\n\r\n    \r\n\r\n//     const isSentByCurrentUser = message.from_uid === Profileid && message.to_uid === sendTo_userid;\r\n//     const isReceivedByCurrentUser = message.from_uid === sendTo_userid && message.to_uid === Profileid;\r\n \r\n\r\n\r\n//                                                  //  8===8 && 10===10\r\n//     if (isSentByCurrentUser || isReceivedByCurrentUser) {\r\n//       return (\r\n//         <React.Fragment key={index}>\r\n//           {showDate && <p className=\"messageDate_show\">{comparisonResult}</p>}\r\n//           <div\r\n//             key={index}\r\n//             className={`message ${isSentByCurrentUser ? 'sent' : 'received'}`}\r\n//           >\r\n//  <p className=\"chat_msgstl\">\r\n//       {message.text}\r\n//       <span className=\"chating_time\">{lowercaseTime}</span>\r\n//     </p>\r\n//           </div>\r\n//         </React.Fragment>\r\n//       );\r\n//     }\r\n//   })}\r\n// </div>\r\n\r\n\r\n\r\n        \r\n// <div className=\"messageInput\">\r\n//           <input type=\"text\"  value={text} onKeyDown={handleKeyPress} onChange={e => setText(e.target.value)} placeholder=\"Type a message...\" />\r\n//           <SendIcon className=\"sendIcon\"  onClick={sendMessage} />\r\n// </div>\r\n         \r\n// </div> \r\n         \r\n//          </>):(<>\r\n         \r\n//           <div className=\"chatRoom_loadingimg\">\r\n//   <div>\r\n//   <img src={defaultchatRoomimg} className=\"imgdeafult-chat\"/>\r\n//  </div>\r\n//  {/* <div>\r\n//   <img src={Tigmalog} className=\"imgdeafult-logo\"/>\r\n//  </div> */}\r\n//   <div class=\"company-info\">\r\n//     <h2>Welcome to Tigma Technology Chat</h2>\r\n// </div>\r\n// </div>\r\n         \r\n//          </>)}\r\n         \r\n\r\n// </div>\r\n//   )\r\n// }\r\n// export default ChatingApp;\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { db, auth, storage } from \"../firebase\";\r\nimport {\r\n  collection,\r\n  query,\r\n  where,\r\n  onSnapshot,\r\n  addDoc,\r\n  Timestamp,\r\n  orderBy,\r\n  setDoc,\r\n  doc,\r\n  getDoc,\r\n  updateDoc,\r\n} from \"firebase/firestore\";\r\nimport { ref, getDownloadURL, uploadBytes } from \"firebase/storage\";\r\n// import User from \"../components/User\";\r\n// import MessageForm from \"../components/MessageForm\";\r\n// import Message from \"../components/Message\";\r\n\r\nconst ChatingApp = () => {\r\n  const [users, setUsers] = useState([]);\r\n  const [chat, setChat] = useState(\"\");\r\n  const [text, setText] = useState(\"\");\r\n  const [img, setImg] = useState(\"\");\r\n  const [msgs, setMsgs] = useState([]);\r\n\r\n  const user1 = auth.currentUser.uid;\r\n\r\n  useEffect(() => {\r\n    const usersRef = collection(db, \"users\");\r\n    // create query object\r\n    const q = query(usersRef, where(\"uid\", \"not-in\", [user1]));\r\n    // execute query\r\n    const unsub = onSnapshot(q, (querySnapshot) => {\r\n      let users = [];\r\n      querySnapshot.forEach((doc) => {\r\n        users.push(doc.data());\r\n      });\r\n      setUsers(users);\r\n    });\r\n    return () => unsub();\r\n  }, []);\r\n\r\n  const selectUser = async (user) => {\r\n    setChat(user);\r\n\r\n    const user2 = user.uid;\r\n    const id = user1 > user2 ? `${user1 + user2}` : `${user2 + user1}`;\r\n\r\n    const msgsRef = collection(db, \"messages\", id, \"chat\");\r\n    const q = query(msgsRef, orderBy(\"createdAt\", \"asc\"));\r\n\r\n    onSnapshot(q, (querySnapshot) => {\r\n      let msgs = [];\r\n      querySnapshot.forEach((doc) => {\r\n        msgs.push(doc.data());\r\n      });\r\n      setMsgs(msgs);\r\n    });\r\n\r\n    // get last message b/w logged in user and selected user\r\n    const docSnap = await getDoc(doc(db, \"lastMsg\", id));\r\n    // if last message exists and message is from selected user\r\n    if (docSnap.data() && docSnap.data().from !== user1) {\r\n      // update last message doc, set unread to false\r\n      await updateDoc(doc(db, \"lastMsg\", id), { unread: false });\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const user2 = chat.uid;\r\n\r\n    const id = user1 > user2 ? `${user1 + user2}` : `${user2 + user1}`;\r\n\r\n    let url;\r\n    if (img) {\r\n      const imgRef = ref(\r\n        storage,\r\n        `images/${new Date().getTime()} - ${img.name}`\r\n      );\r\n      const snap = await uploadBytes(imgRef, img);\r\n      const dlUrl = await getDownloadURL(ref(storage, snap.ref.fullPath));\r\n      url = dlUrl;\r\n    }\r\n\r\n    await addDoc(collection(db, \"messages\", id, \"chat\"), {\r\n      text,\r\n      from: user1,\r\n      to: user2,\r\n      createdAt: Timestamp.fromDate(new Date()),\r\n      media: url || \"\",\r\n    });\r\n\r\n    await setDoc(doc(db, \"lastMsg\", id), {\r\n      text,\r\n      from: user1,\r\n      to: user2,\r\n      createdAt: Timestamp.fromDate(new Date()),\r\n      media: url || \"\",\r\n      unread: true,\r\n    });\r\n\r\n    setText(\"\");\r\n    setImg(\"\");\r\n  };\r\n  return (\r\n    <div className=\"home_container\">\r\n      <div className=\"users_container\">\r\n        {users.map((user) => (\r\n          <User\r\n            key={user.uid}\r\n            user={user}\r\n            selectUser={selectUser}\r\n            user1={user1}\r\n            chat={chat}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className=\"messages_container\">\r\n        {chat ? (\r\n          <>\r\n            <div className=\"messages_user\">\r\n              <h3>{chat.name}</h3>\r\n            </div>\r\n            <div className=\"messages\">\r\n              {msgs.length\r\n                ? msgs.map((msg, i) => (\r\n                    <Message key={i} msg={msg} user1={user1} />\r\n                  ))\r\n                : null}\r\n            </div>\r\n            <MessageForm\r\n              handleSubmit={handleSubmit}\r\n              text={text}\r\n              setText={setText}\r\n              setImg={setImg}\r\n            />\r\n          </>\r\n        ) : (\r\n          <h3 className=\"no_conv\">Select a user to start conversation</h3>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatingApp;"],"mappings":"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ACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AAC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"},"metadata":{},"sourceType":"module"}