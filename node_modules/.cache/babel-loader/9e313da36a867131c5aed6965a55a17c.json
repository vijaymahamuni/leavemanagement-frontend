{"ast":null,"code":"\"use strict\";\n\n// The base date = 0.\nvar dateBase = new Date(1900, 0, 0);\n\n// The date conversion has a bug that assumes 1900 was a leap year. So we need to add one for dates after this.\nvar incorrectLeapDate = new Date(1900, 1, 28);\n\n// Number of milliseconds in a day.\nvar millisecondsInDay = 1000 * 60 * 60 * 24;\n\n/**\n * Date converter.\n * @private\n */\nmodule.exports = {\n  /**\n   * Convert a date to a number for Excel.\n   * @param {Date} date - The date.\n   * @returns {number} The number.\n   */\n  dateToNumber: function dateToNumber(date) {\n    // Clone the date and strip the time off.\n    var dateOnly = new Date(date.getTime());\n    dateOnly.setHours(0, 0, 0, 0);\n\n    // Set the number to be the number of days between the date and the base date.\n    // We need to round as daylight savings will cause fractional days, which we don't want.\n    var number = Math.round((dateOnly - dateBase) / millisecondsInDay);\n\n    // Add the true fractional days from just the milliseconds left in the current day.\n    number += (date - dateOnly) / millisecondsInDay;\n\n    // Adjust for the \"bug\" in Excel that treats 1900 as a leap year.\n    if (date > incorrectLeapDate) number += 1;\n    return number;\n  },\n  /**\n   * Convert a number to a date.\n   * @param {number} number - The number.\n   * @returns {Date} The date.\n   */\n  numberToDate: function numberToDate(number) {\n    // If the number is greater than the incorrect leap date, we should subtract one.\n    if (number > this.dateToNumber(incorrectLeapDate)) number--;\n\n    // Break the number of full days and the remaining milliseconds in the current day.\n    var fullDays = Math.floor(number);\n    var partialMilliseconds = Math.round((number - fullDays) * millisecondsInDay);\n\n    // Create a new date from the base date plus the time in the current day.\n    var date = new Date(dateBase.getTime() + partialMilliseconds);\n\n    // Now add the number of full days. JS will properly handle the month/year changes.\n    date.setDate(date.getDate() + fullDays);\n    return date;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}