{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Project\\\\Front_end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Project\\\\Front_end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar externals = require(\"./externals\");\nvar Workbook = require(\"./Workbook\");\nvar FormulaError = require(\"./FormulaError\");\nvar dateConverter = require(\"./dateConverter\");\nvar RichText = require(\"./RichText\");\n\n/**\n * xlsx-poulate namespace.\n * @namespace\n */\nvar XlsxPopulate = /*#__PURE__*/function () {\n  function XlsxPopulate() {\n    _classCallCheck(this, XlsxPopulate);\n  }\n  _createClass(XlsxPopulate, null, [{\n    key: \"dateToNumber\",\n    /**\n     * Convert a date to a number for Excel.\n     * @param {Date} date - The date.\n     * @returns {number} The number.\n     */\n    value: function dateToNumber(date) {\n      return dateConverter.dateToNumber(date);\n    }\n    /**\n     * Create a new blank workbook.\n     * @returns {Promise.<Workbook>} The workbook.\n     */\n  }, {\n    key: \"fromBlankAsync\",\n    value: function fromBlankAsync() {\n      return Workbook.fromBlankAsync();\n    }\n    /**\n     * Loads a workbook from a data object. (Supports any supported [JSZip data types]{@link https://stuk.github.io/jszip/documentation/api_jszip/load_async.html}.)\n     * @param {string|Array.<number>|ArrayBuffer|Uint8Array|Buffer|Blob|Promise.<*>} data - The data to load.\n     * @param {{}} [opts] - Options\n     * @param {string} [opts.password] - The password to decrypt the workbook.\n     * @returns {Promise.<Workbook>} The workbook.\n     */\n  }, {\n    key: \"fromDataAsync\",\n    value: function fromDataAsync(data, opts) {\n      return Workbook.fromDataAsync(data, opts);\n    }\n    /**\n     * Loads a workbook from file.\n     * @param {string} path - The path to the workbook.\n     * @param {{}} [opts] - Options\n     * @param {string} [opts.password] - The password to decrypt the workbook.\n     * @returns {Promise.<Workbook>} The workbook.\n     */\n  }, {\n    key: \"fromFileAsync\",\n    value: function fromFileAsync(path, opts) {\n      return Workbook.fromFileAsync(path, opts);\n    }\n    /**\n     * Convert an Excel number to a date.\n     * @param {number} number - The number.\n     * @returns {Date} The date.\n     */\n  }, {\n    key: \"numberToDate\",\n    value: function numberToDate(number) {\n      return dateConverter.numberToDate(number);\n    }\n    /**\n     * The Promise library.\n     * @type {Promise}\n     */\n  }, {\n    key: \"Promise\",\n    get: function get() {\n      return externals.Promise;\n    },\n    set: function set(Promise) {\n      externals.Promise = Promise;\n    }\n  }]);\n  return XlsxPopulate;\n}();\n/**\n * The XLSX mime type.\n * @type {string}\n */\nXlsxPopulate.MIME_TYPE = Workbook.MIME_TYPE;\n\n/**\n * Formula error class.\n * @type {FormulaError}\n */\nXlsxPopulate.FormulaError = FormulaError;\n\n/**\n * RichTexts class\n * @type {RichText}\n */\nXlsxPopulate.RichText = RichText;\nmodule.exports = XlsxPopulate;","map":null,"metadata":{},"sourceType":"script"}