{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Project\\\\Front_end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Project\\\\Front_end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar ArgHandler = require(\"./ArgHandler\");\nvar addressConverter = require('./addressConverter');\n\n// Default column width.\nvar defaultColumnWidth = 9.140625;\n\n/**\n * A column.\n */\nvar Column = /*#__PURE__*/function () {\n  // /**\n  //  * Creates a new Column.\n  //  * @param {Sheet} sheet - The parent sheet.\n  //  * @param {{}} node - The column node.\n  //  * @constructor\n  //  * @ignore\n  //  * @private\n  //  */\n  function Column(sheet, node) {\n    _classCallCheck(this, Column);\n    this._sheet = sheet;\n    this._node = node;\n  }\n\n  /* PUBLIC */\n\n  /**\n   * Get the address of the column.\n   * @param {{}} [opts] - Options\n   * @param {boolean} [opts.includeSheetName] - Include the sheet name in the address.\n   * @param {boolean} [opts.anchored] - Anchor the address.\n   * @returns {string} The address\n   */\n  _createClass(Column, [{\n    key: \"address\",\n    value: function address(opts) {\n      return addressConverter.toAddress({\n        type: 'column',\n        columnName: this.columnName(),\n        sheetName: opts && opts.includeSheetName && this.sheet().name(),\n        columnAnchored: opts && opts.anchored\n      });\n    }\n    /**\n     * Get a cell within the column.\n     * @param {number} rowNumber - The row number.\n     * @returns {Cell} The cell in the column with the given row number.\n     */\n  }, {\n    key: \"cell\",\n    value: function cell(rowNumber) {\n      return this.sheet().cell(rowNumber, this.columnNumber());\n    }\n    /**\n     * Get the name of the column.\n     * @returns {string} The column name.\n     */\n  }, {\n    key: \"columnName\",\n    value: function columnName() {\n      return addressConverter.columnNumberToName(this.columnNumber());\n    }\n    /**\n     * Get the number of the column.\n     * @returns {number} The column number.\n     */\n  }, {\n    key: \"columnNumber\",\n    value: function columnNumber() {\n      return this._node.attributes.min;\n    }\n    /**\n     * Gets a value indicating whether the column is hidden.\n     * @returns {boolean} A flag indicating whether the column is hidden.\n     */\n    /**\n    * Sets whether the column is hidden.\n    * @param {boolean} hidden - A flag indicating whether to hide the column.\n    * @returns {Column} The column.\n    */\n  }, {\n    key: \"hidden\",\n    value: function hidden() {\n      var _this = this;\n      return new ArgHandler(\"Column.hidden\").case(function () {\n        return _this._node.attributes.hidden === 1;\n      }).case('boolean', function (hidden) {\n        if (hidden) _this._node.attributes.hidden = 1;else delete _this._node.attributes.hidden;\n        return _this;\n      }).handle(arguments);\n    }\n    /**\n     * Get the parent sheet.\n     * @returns {Sheet} The parent sheet.\n     */\n  }, {\n    key: \"sheet\",\n    value: function sheet() {\n      return this._sheet;\n    }\n    /**\n     * Gets an individual style.\n     * @param {string} name - The name of the style.\n     * @returns {*} The style.\n     */\n    /**\n    * Gets multiple styles.\n    * @param {Array.<string>} names - The names of the style.\n    * @returns {object.<string, *>} Object whose keys are the style names and values are the styles.\n    */\n    /**\n    * Sets an individual style.\n    * @param {string} name - The name of the style.\n    * @param {*} value - The value to set.\n    * @returns {Cell} The cell.\n    */\n    /**\n    * Sets multiple styles.\n    * @param {object.<string, *>} styles - Object whose keys are the style names and values are the styles to set.\n    * @returns {Cell} The cell.\n    */\n    /**\n    * Sets to a specific style\n    * @param {Style} style - Style object given from stylesheet.createStyle\n    * @returns {Cell} The cell.\n    */\n  }, {\n    key: \"style\",\n    value: function style() {\n      var _this2 = this;\n      return new ArgHandler(\"Column.style\").case('string', function (name) {\n        // Get single value\n        _this2._createStyleIfNeeded();\n        return _this2._style.style(name);\n      }).case('array', function (names) {\n        // Get list of values\n        var values = {};\n        names.forEach(function (name) {\n          values[name] = _this2.style(name);\n        });\n        return values;\n      }).case(['string', '*'], function (name, value) {\n        // If a row node is already defined that intersects with this column and that row has a style set, we\n        // need to make sure that a cell node exists at the intersection so we can style it appropriately.\n        // Fetching the cell will force a new cell node to be created with a style matching the column. So we\n        // will fetch and style the cell at each row that intersects this column if it is already present or it\n        // has a style defined.\n        _this2.sheet().forEachExistingRow(function (row) {\n          if (row.hasStyle() || row.hasCell(_this2.columnNumber())) {\n            row.cell(_this2.columnNumber()).style(name, value);\n          }\n        });\n\n        // Set a single value for all cells to a single value\n        _this2._createStyleIfNeeded();\n        _this2._style.style(name, value);\n        return _this2;\n      }).case('object', function (nameValues) {\n        // Object of key value pairs to set\n        for (var name in nameValues) {\n          if (!nameValues.hasOwnProperty(name)) continue;\n          var value = nameValues[name];\n          _this2.style(name, value);\n        }\n        return _this2;\n      }).case('Style', function (style) {\n        // See Large Comment Above\n        _this2.sheet().forEachExistingRow(function (row) {\n          if (row.hasStyle() || row.hasCell(_this2.columnNumber())) {\n            row.cell(_this2.columnNumber()).style(style);\n          }\n        });\n        _this2._style = style;\n        _this2._node.attributes.style = style.id();\n        return _this2;\n      }).handle(arguments);\n    }\n    /**\n     * Gets the width.\n     * @returns {undefined|number} The width (or undefined).\n     */\n    /**\n    * Sets the width.\n    * @param {number} width - The width of the column.\n    * @returns {Column} The column.\n    */\n  }, {\n    key: \"width\",\n    value: function width(_width) {\n      var _this3 = this;\n      return new ArgHandler(\"Column.width\").case(function () {\n        return _this3._node.attributes.customWidth ? _this3._node.attributes.width : undefined;\n      }).case('number', function (width) {\n        _this3._node.attributes.width = width;\n        _this3._node.attributes.customWidth = 1;\n        return _this3;\n      }).case('nil', function () {\n        delete _this3._node.attributes.width;\n        delete _this3._node.attributes.customWidth;\n        return _this3;\n      }).handle(arguments);\n    }\n    /**\n     * Get the parent workbook.\n     * @returns {Workbook} The parent workbook.\n     */\n  }, {\n    key: \"workbook\",\n    value: function workbook() {\n      return this.sheet().workbook();\n    }\n    /**\n     * Append vertical page break after the column.\n     * @returns {Column} the column.\n     */\n  }, {\n    key: \"addPageBreak\",\n    value: function addPageBreak() {\n      this.sheet().verticalPageBreaks().add(this.columnNumber());\n      return this;\n    }\n    /* INTERNAL */\n    /**\n     * Convert the column to an XML object.\n     * @returns {{}} The XML form.\n     * @ignore\n     */\n  }, {\n    key: \"toXml\",\n    value: function toXml() {\n      return this._node;\n    }\n    /* PRIVATE */\n    /**\n     * Create a style for this column if it doesn't already exist.\n     * @returns {undefined}\n     * @private\n     */\n  }, {\n    key: \"_createStyleIfNeeded\",\n    value: function _createStyleIfNeeded() {\n      if (!this._style) {\n        var styleId = this._node.attributes.style;\n        this._style = this.workbook().styleSheet().createStyle(styleId);\n        this._node.attributes.style = this._style.id();\n        if (!this.width()) this.width(defaultColumnWidth);\n      }\n    }\n  }]);\n  return Column;\n}();\nmodule.exports = Column;","map":null,"metadata":{},"sourceType":"script"}