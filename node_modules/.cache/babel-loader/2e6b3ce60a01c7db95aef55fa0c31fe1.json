{"ast":null,"code":"\"use strict\";\n\n/* eslint camelcase:off */\nvar _defineProperty = require(\"C:\\\\Project\\\\Front_end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\nvar _classCallCheck = require(\"C:\\\\Project\\\\Front_end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Project\\\\Front_end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar ArgHandler = require(\"./ArgHandler\");\nvar _ = require(\"lodash\");\nvar xmlq = require(\"./xmlq\");\nvar colorIndexes = require(\"./colorIndexes\");\n\n/**\n * A style.\n * @ignore\n */\nvar Style = /*#__PURE__*/function () {\n  /**\n   * Creates a new instance of _Style.\n   * @constructor\n   * @param {StyleSheet} styleSheet - The styleSheet.\n   * @param {number} id - The style ID.\n   * @param {{}} xfNode - The xf node.\n   * @param {{}} fontNode - The font node.\n   * @param {{}} fillNode - The fill node.\n   * @param {{}} borderNode - The border node.\n   */\n  function Style(styleSheet, id, xfNode, fontNode, fillNode, borderNode) {\n    _classCallCheck(this, Style);\n    this._styleSheet = styleSheet;\n    this._id = id;\n    this._xfNode = xfNode;\n    this._fontNode = fontNode;\n    this._fillNode = fillNode;\n    this._borderNode = borderNode;\n  }\n\n  /**\n   * Gets the style ID.\n   * @returns {number} The ID.\n   */\n  _createClass(Style, [{\n    key: \"id\",\n    value: function id() {\n      return this._id;\n    }\n    /**\n     * Gets or sets a style.\n     * @param {string} name - The style name.\n     * @param {*} [value] - The value to set.\n     * @returns {*|Style} The value if getting or the style if setting.\n     */\n  }, {\n    key: \"style\",\n    value: function style() {\n      var _this = this;\n      return new ArgHandler(\"_Style.style\").case('string', function (name) {\n        var getterName = \"_get_\".concat(name);\n        if (!_this[getterName]) throw new Error(\"_Style.style: '\".concat(name, \"' is not a valid style\"));\n        return _this[getterName]();\n      }).case(['string', '*'], function (name, value) {\n        var setterName = \"_set_\".concat(name);\n        if (!_this[setterName]) throw new Error(\"_Style.style: '\".concat(name, \"' is not a valid style\"));\n        _this[setterName](value);\n        return _this;\n      }).handle(arguments);\n    }\n  }, {\n    key: \"_getColor\",\n    value: function _getColor(node, name) {\n      var child = xmlq.findChild(node, name);\n      if (!child || !child.attributes) return;\n      var color = {};\n      if (child.attributes.hasOwnProperty('rgb')) color.rgb = child.attributes.rgb;else if (child.attributes.hasOwnProperty('theme')) color.theme = child.attributes.theme;else if (child.attributes.hasOwnProperty('indexed')) color.rgb = colorIndexes[child.attributes.indexed];\n      if (child.attributes.hasOwnProperty('tint')) color.tint = child.attributes.tint;\n      if (_.isEmpty(color)) return;\n      return color;\n    }\n  }, {\n    key: \"_setColor\",\n    value: function _setColor(node, name, color) {\n      if (typeof color === \"string\") color = {\n        rgb: color\n      };else if (typeof color === \"number\") color = {\n        theme: color\n      };\n      xmlq.setChildAttributes(node, name, {\n        rgb: color && color.rgb && color.rgb.toUpperCase(),\n        indexed: null,\n        theme: color && color.theme,\n        tint: color && color.tint\n      });\n      xmlq.removeChildIfEmpty(node, 'color');\n    }\n  }, {\n    key: \"_get_bold\",\n    value: function _get_bold() {\n      return xmlq.hasChild(this._fontNode, 'b');\n    }\n  }, {\n    key: \"_set_bold\",\n    value: function _set_bold(bold) {\n      if (bold) xmlq.appendChildIfNotFound(this._fontNode, \"b\");else xmlq.removeChild(this._fontNode, 'b');\n    }\n  }, {\n    key: \"_get_italic\",\n    value: function _get_italic() {\n      return xmlq.hasChild(this._fontNode, 'i');\n    }\n  }, {\n    key: \"_set_italic\",\n    value: function _set_italic(italic) {\n      if (italic) xmlq.appendChildIfNotFound(this._fontNode, \"i\");else xmlq.removeChild(this._fontNode, 'i');\n    }\n  }, {\n    key: \"_get_underline\",\n    value: function _get_underline() {\n      var uNode = xmlq.findChild(this._fontNode, 'u');\n      return uNode ? uNode.attributes.val || true : false;\n    }\n  }, {\n    key: \"_set_underline\",\n    value: function _set_underline(underline) {\n      if (underline) {\n        var uNode = xmlq.appendChildIfNotFound(this._fontNode, \"u\");\n        var val = typeof underline === 'string' ? underline : null;\n        xmlq.setAttributes(uNode, {\n          val: val\n        });\n      } else {\n        xmlq.removeChild(this._fontNode, 'u');\n      }\n    }\n  }, {\n    key: \"_get_strikethrough\",\n    value: function _get_strikethrough() {\n      return xmlq.hasChild(this._fontNode, 'strike');\n    }\n  }, {\n    key: \"_set_strikethrough\",\n    value: function _set_strikethrough(strikethrough) {\n      if (strikethrough) xmlq.appendChildIfNotFound(this._fontNode, \"strike\");else xmlq.removeChild(this._fontNode, 'strike');\n    }\n  }, {\n    key: \"_getFontVerticalAlignment\",\n    value: function _getFontVerticalAlignment() {\n      return xmlq.getChildAttribute(this._fontNode, 'vertAlign', \"val\");\n    }\n  }, {\n    key: \"_setFontVerticalAlignment\",\n    value: function _setFontVerticalAlignment(alignment) {\n      xmlq.setChildAttributes(this._fontNode, 'vertAlign', {\n        val: alignment\n      });\n      xmlq.removeChildIfEmpty(this._fontNode, 'vertAlign');\n    }\n  }, {\n    key: \"_get_subscript\",\n    value: function _get_subscript() {\n      return this._getFontVerticalAlignment() === \"subscript\";\n    }\n  }, {\n    key: \"_set_subscript\",\n    value: function _set_subscript(subscript) {\n      this._setFontVerticalAlignment(subscript ? \"subscript\" : null);\n    }\n  }, {\n    key: \"_get_superscript\",\n    value: function _get_superscript() {\n      return this._getFontVerticalAlignment() === \"superscript\";\n    }\n  }, {\n    key: \"_set_superscript\",\n    value: function _set_superscript(superscript) {\n      this._setFontVerticalAlignment(superscript ? \"superscript\" : null);\n    }\n  }, {\n    key: \"_get_fontSize\",\n    value: function _get_fontSize() {\n      return xmlq.getChildAttribute(this._fontNode, 'sz', \"val\");\n    }\n  }, {\n    key: \"_set_fontSize\",\n    value: function _set_fontSize(size) {\n      xmlq.setChildAttributes(this._fontNode, 'sz', {\n        val: size\n      });\n      xmlq.removeChildIfEmpty(this._fontNode, 'sz');\n    }\n  }, {\n    key: \"_get_fontFamily\",\n    value: function _get_fontFamily() {\n      return xmlq.getChildAttribute(this._fontNode, 'name', \"val\");\n    }\n  }, {\n    key: \"_set_fontFamily\",\n    value: function _set_fontFamily(family) {\n      xmlq.setChildAttributes(this._fontNode, 'name', {\n        val: family\n      });\n      xmlq.removeChildIfEmpty(this._fontNode, 'name');\n    }\n  }, {\n    key: \"_get_fontGenericFamily\",\n    value: function _get_fontGenericFamily() {\n      return xmlq.getChildAttribute(this._fontNode, 'family', \"val\");\n    }\n  }, {\n    key: \"_set_fontGenericFamily\",\n    value: function _set_fontGenericFamily(genericFamily) {\n      xmlq.setChildAttributes(this._fontNode, 'family', {\n        val: genericFamily\n      });\n      xmlq.removeChildIfEmpty(this._fontNode, 'family');\n    }\n  }, {\n    key: \"_get_fontColor\",\n    value: function _get_fontColor() {\n      return this._getColor(this._fontNode, \"color\");\n    }\n  }, {\n    key: \"_set_fontColor\",\n    value: function _set_fontColor(color) {\n      this._setColor(this._fontNode, \"color\", color);\n    }\n  }, {\n    key: \"_get_fontScheme\",\n    value: function _get_fontScheme() {\n      // can be 'minor', 'major', 'none'\n      return xmlq.getChildAttribute(this._fontNode, 'scheme', \"val\");\n    }\n  }, {\n    key: \"_set_fontScheme\",\n    value: function _set_fontScheme(scheme) {\n      xmlq.setChildAttributes(this._fontNode, 'scheme', {\n        val: scheme\n      });\n      xmlq.removeChildIfEmpty(this._fontNode, 'scheme');\n    }\n  }, {\n    key: \"_get_horizontalAlignment\",\n    value: function _get_horizontalAlignment() {\n      return xmlq.getChildAttribute(this._xfNode, 'alignment', \"horizontal\");\n    }\n  }, {\n    key: \"_set_horizontalAlignment\",\n    value: function _set_horizontalAlignment(alignment) {\n      xmlq.setChildAttributes(this._xfNode, 'alignment', {\n        horizontal: alignment\n      });\n      xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n  }, {\n    key: \"_get_justifyLastLine\",\n    value: function _get_justifyLastLine() {\n      return xmlq.getChildAttribute(this._xfNode, 'alignment', \"justifyLastLine\") === 1;\n    }\n  }, {\n    key: \"_set_justifyLastLine\",\n    value: function _set_justifyLastLine(justifyLastLine) {\n      xmlq.setChildAttributes(this._xfNode, 'alignment', {\n        justifyLastLine: justifyLastLine ? 1 : null\n      });\n      xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n  }, {\n    key: \"_get_indent\",\n    value: function _get_indent() {\n      return xmlq.getChildAttribute(this._xfNode, 'alignment', \"indent\");\n    }\n  }, {\n    key: \"_set_indent\",\n    value: function _set_indent(indent) {\n      xmlq.setChildAttributes(this._xfNode, 'alignment', {\n        indent: indent\n      });\n      xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n  }, {\n    key: \"_get_verticalAlignment\",\n    value: function _get_verticalAlignment() {\n      return xmlq.getChildAttribute(this._xfNode, 'alignment', \"vertical\");\n    }\n  }, {\n    key: \"_set_verticalAlignment\",\n    value: function _set_verticalAlignment(alignment) {\n      xmlq.setChildAttributes(this._xfNode, 'alignment', {\n        vertical: alignment\n      });\n      xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n  }, {\n    key: \"_get_wrapText\",\n    value: function _get_wrapText() {\n      return xmlq.getChildAttribute(this._xfNode, 'alignment', \"wrapText\") === 1;\n    }\n  }, {\n    key: \"_set_wrapText\",\n    value: function _set_wrapText(wrapText) {\n      xmlq.setChildAttributes(this._xfNode, 'alignment', {\n        wrapText: wrapText ? 1 : null\n      });\n      xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n  }, {\n    key: \"_get_shrinkToFit\",\n    value: function _get_shrinkToFit() {\n      return xmlq.getChildAttribute(this._xfNode, 'alignment', \"shrinkToFit\") === 1;\n    }\n  }, {\n    key: \"_set_shrinkToFit\",\n    value: function _set_shrinkToFit(shrinkToFit) {\n      xmlq.setChildAttributes(this._xfNode, 'alignment', {\n        shrinkToFit: shrinkToFit ? 1 : null\n      });\n      xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n  }, {\n    key: \"_get_textDirection\",\n    value: function _get_textDirection() {\n      var readingOrder = xmlq.getChildAttribute(this._xfNode, 'alignment', \"readingOrder\");\n      if (readingOrder === 1) return \"left-to-right\";\n      if (readingOrder === 2) return \"right-to-left\";\n      return readingOrder;\n    }\n  }, {\n    key: \"_set_textDirection\",\n    value: function _set_textDirection(textDirection) {\n      var readingOrder;\n      if (textDirection === \"left-to-right\") readingOrder = 1;else if (textDirection === \"right-to-left\") readingOrder = 2;\n      xmlq.setChildAttributes(this._xfNode, 'alignment', {\n        readingOrder: readingOrder\n      });\n      xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n  }, {\n    key: \"_getTextRotation\",\n    value: function _getTextRotation() {\n      return xmlq.getChildAttribute(this._xfNode, 'alignment', \"textRotation\");\n    }\n  }, {\n    key: \"_setTextRotation\",\n    value: function _setTextRotation(textRotation) {\n      xmlq.setChildAttributes(this._xfNode, 'alignment', {\n        textRotation: textRotation\n      });\n      xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n  }, {\n    key: \"_get_textRotation\",\n    value: function _get_textRotation() {\n      var textRotation = this._getTextRotation();\n\n      // Negative angles in Excel correspond to values > 90 in OOXML.\n      if (textRotation > 90) textRotation = 90 - textRotation;\n      return textRotation;\n    }\n  }, {\n    key: \"_set_textRotation\",\n    value: function _set_textRotation(textRotation) {\n      // Negative angles in Excel correspond to values > 90 in OOXML.\n      if (textRotation < 0) textRotation = 90 - textRotation;\n      this._setTextRotation(textRotation);\n    }\n  }, {\n    key: \"_get_angleTextCounterclockwise\",\n    value: function _get_angleTextCounterclockwise() {\n      return this._getTextRotation() === 45;\n    }\n  }, {\n    key: \"_set_angleTextCounterclockwise\",\n    value: function _set_angleTextCounterclockwise(value) {\n      this._setTextRotation(value ? 45 : null);\n    }\n  }, {\n    key: \"_get_angleTextClockwise\",\n    value: function _get_angleTextClockwise() {\n      return this._getTextRotation() === 135;\n    }\n  }, {\n    key: \"_set_angleTextClockwise\",\n    value: function _set_angleTextClockwise(value) {\n      this._setTextRotation(value ? 135 : null);\n    }\n  }, {\n    key: \"_get_rotateTextUp\",\n    value: function _get_rotateTextUp() {\n      return this._getTextRotation() === 90;\n    }\n  }, {\n    key: \"_set_rotateTextUp\",\n    value: function _set_rotateTextUp(value) {\n      this._setTextRotation(value ? 90 : null);\n    }\n  }, {\n    key: \"_get_rotateTextDown\",\n    value: function _get_rotateTextDown() {\n      return this._getTextRotation() === 180;\n    }\n  }, {\n    key: \"_set_rotateTextDown\",\n    value: function _set_rotateTextDown(value) {\n      this._setTextRotation(value ? 180 : null);\n    }\n  }, {\n    key: \"_get_verticalText\",\n    value: function _get_verticalText() {\n      return this._getTextRotation() === 255;\n    }\n  }, {\n    key: \"_set_verticalText\",\n    value: function _set_verticalText(value) {\n      this._setTextRotation(value ? 255 : null);\n    }\n  }, {\n    key: \"_get_fill\",\n    value: function _get_fill() {\n      var _this2 = this;\n      var patternFillNode = xmlq.findChild(this._fillNode, 'patternFill'); // jq.get(this._fillNode, \"patternFill[0]\");\n      var gradientFillNode = xmlq.findChild(this._fillNode, 'gradientFill'); // jq.get(this._fillNode, \"gradientFill[0]\");\n      var patternType = patternFillNode && patternFillNode.attributes.patternType; // jq.get(patternFillNode, \"$.patternType\");\n\n      if (patternType === \"solid\") {\n        return {\n          type: \"solid\",\n          color: this._getColor(patternFillNode, \"fgColor\")\n        };\n      }\n      if (patternType) {\n        return {\n          type: \"pattern\",\n          pattern: patternType,\n          foreground: this._getColor(patternFillNode, \"fgColor\"),\n          background: this._getColor(patternFillNode, \"bgColor\")\n        };\n      }\n      if (gradientFillNode) {\n        var gradientType = gradientFillNode.attributes.type || \"linear\";\n        var fill = {\n          type: \"gradient\",\n          gradientType: gradientType,\n          stops: _.map(gradientFillNode.children, function (stop) {\n            return {\n              position: stop.attributes.position,\n              color: _this2._getColor(stop, \"color\")\n            };\n          })\n        };\n        if (gradientType === \"linear\") {\n          fill.angle = gradientFillNode.attributes.degree;\n        } else {\n          fill.left = gradientFillNode.attributes.left;\n          fill.right = gradientFillNode.attributes.right;\n          fill.top = gradientFillNode.attributes.top;\n          fill.bottom = gradientFillNode.attributes.bottom;\n        }\n        return fill;\n      }\n    }\n  }, {\n    key: \"_set_fill\",\n    value: function _set_fill(fill) {\n      var _this3 = this;\n      this._fillNode.children = [];\n\n      // No fill\n      if (_.isNil(fill)) return;\n\n      // Pattern fill\n      if (fill.type === \"pattern\") {\n        var _patternFill = {\n          name: 'patternFill',\n          attributes: {\n            patternType: fill.pattern\n          },\n          children: []\n        };\n        this._fillNode.children.push(_patternFill);\n        this._setColor(_patternFill, \"fgColor\", fill.foreground);\n        this._setColor(_patternFill, \"bgColor\", fill.background);\n        return;\n      }\n\n      // Gradient fill\n      if (fill.type === \"gradient\") {\n        var gradientFill = {\n          name: 'gradientFill',\n          attributes: {},\n          children: []\n        };\n        this._fillNode.children.push(gradientFill);\n        xmlq.setAttributes(gradientFill, {\n          type: fill.gradientType === \"path\" ? \"path\" : undefined,\n          left: fill.left,\n          right: fill.right,\n          top: fill.top,\n          bottom: fill.bottom,\n          degree: fill.angle\n        });\n        _.forEach(fill.stops, function (fillStop, i) {\n          var stop = {\n            name: 'stop',\n            attributes: {\n              position: fillStop.position\n            },\n            children: []\n          };\n          gradientFill.children.push(stop);\n          _this3._setColor(stop, 'color', fillStop.color);\n        });\n        return;\n      }\n\n      // Solid fill (really a pattern fill with a solid pattern type).\n      if (!_.isObject(fill)) fill = {\n        type: \"solid\",\n        color: fill\n      };else if (fill.hasOwnProperty('rgb') || fill.hasOwnProperty(\"theme\")) fill = {\n        color: fill\n      };\n      var patternFill = {\n        name: 'patternFill',\n        attributes: {\n          patternType: 'solid'\n        }\n      };\n      this._fillNode.children.push(patternFill);\n      this._setColor(patternFill, \"fgColor\", fill.color);\n    }\n  }, {\n    key: \"_getBorder\",\n    value: function _getBorder() {\n      var _this4 = this;\n      var result = {};\n      [\"left\", \"right\", \"top\", \"bottom\", \"diagonal\"].forEach(function (side) {\n        var sideNode = xmlq.findChild(_this4._borderNode, side);\n        var sideResult = {};\n        var style = xmlq.getChildAttribute(_this4._borderNode, side, 'style');\n        if (style) sideResult.style = style;\n        var color = _this4._getColor(sideNode, 'color');\n        if (color) sideResult.color = color;\n        if (side === \"diagonal\") {\n          var up = _this4._borderNode.attributes.diagonalUp;\n          var down = _this4._borderNode.attributes.diagonalDown;\n          var direction;\n          if (up && down) direction = \"both\";else if (up) direction = \"up\";else if (down) direction = \"down\";\n          if (direction) sideResult.direction = direction;\n        }\n        if (!_.isEmpty(sideResult)) result[side] = sideResult;\n      });\n      return result;\n    }\n  }, {\n    key: \"_setBorder\",\n    value: function _setBorder(settings) {\n      var _this5 = this;\n      _.forOwn(settings, function (setting, side) {\n        if (typeof setting === \"boolean\") {\n          setting = {\n            style: setting ? \"thin\" : null\n          };\n        } else if (typeof setting === \"string\") {\n          setting = {\n            style: setting\n          };\n        } else if (setting === null || setting === undefined) {\n          setting = {\n            style: null,\n            color: null,\n            direction: null\n          };\n        }\n        if (setting.hasOwnProperty(\"style\")) {\n          xmlq.setChildAttributes(_this5._borderNode, side, {\n            style: setting.style\n          });\n        }\n        if (setting.hasOwnProperty(\"color\")) {\n          var sideNode = xmlq.findChild(_this5._borderNode, side);\n          _this5._setColor(sideNode, \"color\", setting.color);\n        }\n        if (side === \"diagonal\") {\n          xmlq.setAttributes(_this5._borderNode, {\n            diagonalUp: setting.direction === \"up\" || setting.direction === \"both\" ? 1 : null,\n            diagonalDown: setting.direction === \"down\" || setting.direction === \"both\" ? 1 : null\n          });\n        }\n      });\n    }\n  }, {\n    key: \"_get_border\",\n    value: function _get_border() {\n      return this._getBorder();\n    }\n  }, {\n    key: \"_set_border\",\n    value: function _set_border(settings) {\n      if (_.isObject(settings) && !settings.hasOwnProperty(\"style\") && !settings.hasOwnProperty(\"color\")) {\n        settings = _.defaults(settings, {\n          left: null,\n          right: null,\n          top: null,\n          bottom: null,\n          diagonal: null\n        });\n        this._setBorder(settings);\n      } else {\n        this._setBorder({\n          left: settings,\n          right: settings,\n          top: settings,\n          bottom: settings\n        });\n      }\n    }\n  }, {\n    key: \"_get_borderColor\",\n    value: function _get_borderColor() {\n      return _.mapValues(this._getBorder(), function (value) {\n        return value.color;\n      });\n    }\n  }, {\n    key: \"_set_borderColor\",\n    value: function _set_borderColor(color) {\n      if (_.isObject(color)) {\n        this._setBorder(_.mapValues(color, function (color) {\n          return {\n            color: color\n          };\n        }));\n      } else {\n        this._setBorder({\n          left: {\n            color: color\n          },\n          right: {\n            color: color\n          },\n          top: {\n            color: color\n          },\n          bottom: {\n            color: color\n          },\n          diagonal: {\n            color: color\n          }\n        });\n      }\n    }\n  }, {\n    key: \"_get_borderStyle\",\n    value: function _get_borderStyle() {\n      return _.mapValues(this._getBorder(), function (value) {\n        return value.style;\n      });\n    }\n  }, {\n    key: \"_set_borderStyle\",\n    value: function _set_borderStyle(style) {\n      if (_.isObject(style)) {\n        this._setBorder(_.mapValues(style, function (style) {\n          return {\n            style: style\n          };\n        }));\n      } else {\n        this._setBorder({\n          left: {\n            style: style\n          },\n          right: {\n            style: style\n          },\n          top: {\n            style: style\n          },\n          bottom: {\n            style: style\n          }\n        });\n      }\n    }\n  }, {\n    key: \"_get_diagonalBorderDirection\",\n    value: function _get_diagonalBorderDirection() {\n      var border = this._getBorder().diagonal;\n      return border && border.direction;\n    }\n  }, {\n    key: \"_set_diagonalBorderDirection\",\n    value: function _set_diagonalBorderDirection(direction) {\n      this._setBorder({\n        diagonal: {\n          direction: direction\n        }\n      });\n    }\n  }, {\n    key: \"_get_numberFormat\",\n    value: function _get_numberFormat() {\n      var numFmtId = this._xfNode.attributes.numFmtId || 0;\n      return this._styleSheet.getNumberFormatCode(numFmtId);\n    }\n  }, {\n    key: \"_set_numberFormat\",\n    value: function _set_numberFormat(formatCode) {\n      this._xfNode.attributes.numFmtId = this._styleSheet.getNumberFormatId(formatCode);\n    }\n  }]);\n  return Style;\n}();\n[\"left\", \"right\", \"top\", \"bottom\", \"diagonal\"].forEach(function (side) {\n  Style.prototype[\"_get_\".concat(side, \"Border\")] = function () {\n    return this._getBorder()[side];\n  };\n  Style.prototype[\"_set_\".concat(side, \"Border\")] = function (settings) {\n    this._setBorder(_defineProperty({}, side, settings));\n  };\n  Style.prototype[\"_get_\".concat(side, \"BorderColor\")] = function () {\n    var border = this._getBorder()[side];\n    return border && border.color;\n  };\n  Style.prototype[\"_set_\".concat(side, \"BorderColor\")] = function (color) {\n    this._setBorder(_defineProperty({}, side, {\n      color: color\n    }));\n  };\n  Style.prototype[\"_get_\".concat(side, \"BorderStyle\")] = function () {\n    var border = this._getBorder()[side];\n    return border && border.style;\n  };\n  Style.prototype[\"_set_\".concat(side, \"BorderStyle\")] = function (style) {\n    this._setBorder(_defineProperty({}, side, {\n      style: style\n    }));\n  };\n});\n\n// IE doesn't support function names so explicitly set it.\nif (!Style.name) Style.name = \"Style\";\nmodule.exports = Style;","map":null,"metadata":{},"sourceType":"script"}